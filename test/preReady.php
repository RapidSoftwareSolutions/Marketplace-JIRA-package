<?php
return array (
    array (
        'name' => 'getMyPermissions',
        'vendorUrl' => '/rest/api/2/mypermissions',
        'method' => 'GET',
        'description' => 'Returns all permissions in the system and whether the currently logged in user has them.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'projectKey' => array (
                'type' => 'string',
                'info' => 'Key of project to scope returned permissions for.',
                'required' => false,
            ),
            'projectId' => array (
                'type' => 'string',
                'info' => 'Id of project to scope returned permissions for.',
                'required' => false,
            ),
            'issueKey' => array (
                'type' => 'string',
                'info' => 'Key of the issue to scope returned permissions for.',
                'required' => false,
            ),
            'issueId' => array (
                'type' => 'string',
                'info' => 'Id of the issue to scope returned permissions for.',
                'required' => false,
            ),
        ),
    ),
    array (
        'name' => 'getAllPermissions',
        'vendorUrl' => '/rest/api/2/permissions',
        'method' => 'GET',
        'description' => 'Returns all permissions that are present in the JIRA instance - Global, Project and the global ones added by plugins.',
        'example' => '',
        'schema' => '',
        'args' => array (),
    ),
    array (
        'name' => 'getProperty',
        'vendorUrl' => '/rest/api/2/application-properties',
        'method' => 'GET',
        'description' => 'Returns an application property.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'key' => array (
                'type' => 'String',
                'info' => 'A String containing the property key.',
                'required' => false,
            ),
            'permissionLevel' => array (
                'type' => 'String',
                'info' => 'When fetching a list specifies the permission level of all items in the list.',
                'required' => false,
            ),
            'keyFilter' => array (
                'type' => 'string',
                'info' => 'When fetching a list allows the list to be filtered by the property\'s start of key e.g.',
                'required' => false,
            ),
        ),
    ),
    array (
        'name' => 'setProperty',
        'vendorUrl' => '/rest/api/2/application-properties/{id}',
        'method' => 'PUT',
        'description' => 'Modify an application property via PUT.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'id' => array (
                'required' => true,
                'example' => '"jira.home"',
                'schema' => '{"type":"string"}',
                'type' => 'string',
                'info' => 'Application property identifier.',
            ),
            'value' => array (
                'example' => '"/var/jira/jira-home"',
                'schema' => '{"type":"string"}',
                'type' => 'string',
                'info' => 'If present in the PUT will override the existing value.',
                'required' => false,
            ),
        ),
    ),
    array (
        'name' => 'getAdvancedSettings',
        'vendorUrl' => '/rest/api/2/application-properties/advanced-settings',
        'method' => 'GET',
        'description' => 'Returns the properties that are displayed on the "General Configuration > Advanced Settings" page.',
        'example' => '',
        'schema' => '',
        'args' => array (),
    ),
    array (
        'name' => 'getApplicationRoles',
        'vendorUrl' => '/rest/api/2/applicationrole',
        'method' => 'GET',
        'description' => 'Returns all ApplicationRoles in the system. Will also return an ETag header containing a version hash of thecollection of ApplicationRoles.',
        'example' => '',
        'schema' => '',
        'args' => array (),
    ),
    array (
        'name' => 'getSingleApplicationRole',
        'vendorUrl' => '/rest/api/2/applicationrole/{key}',
        'method' => 'GET',
        'description' => 'Returns the ApplicationRole with passed key if it exists.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'key' => array (
                'required' => true,
                'type' => 'string',
                'info' => 'ApplicationRole key.',
            ),
        ),
    ),
    array (
        'name' => 'getSingleAttachment',
        'vendorUrl' => '/rest/api/2/attachment/{id}',
        'method' => 'GET',
        'description' => 'Returns the meta-data for an attachment, including the URI of the actual attached file.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'id' => array (
                'required' => true,
                'type' => 'string',
                'info' => 'Attachment identifier.',
            ),
        ),
    ),
    array (
        'name' => 'removeSingleAttachment',
        'vendorUrl' => '/rest/api/2/attachment/{id}',
        'method' => 'DELETE',
        'description' => 'Remove an attachment from an issue.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'id' => array (
                'required' => true,
                'type' => 'string',
                'info' => 'Attachment identifier.',
            ),
        ),
    ),
    array (
        'name' => 'getAuditingRecords',
        'vendorUrl' => '/rest/api/2/auditing/record',
        'method' => 'GET',
        'description' => 'Returns auditing records filtered using provided parameters.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'filter' => array (
                'type' => 'string',
                'info' => 'Text query, each record that will be returned must contain the provided text in one of its fields.',
                'required' => false,
            ),
            'offset' => array (
                'type' => 'int',
                'info' => 'The number of record from which search starts.',
                'required' => false,
            ),
            'limit' => array (
                'type' => 'int',
                'info' => 'Maximum number of returned results (if is limit is <= 0 or > 1000, it will be set do default value: 1000).',
                'required' => false,
            ),
            'from' => array (
                'type' => 'string',
                'info' => 'Timestamp in past. \'from\' must be less or equal \'to\'',
                'required' => false,
            ),
            'to' => array (
                'type' => 'string',
                'info' => 'Timestamp in past; \'from\' must be less or equal \'to\'.',
                'required' => false,
            ),
        ),
    ),
    array (
        'name' => 'addAuditingRecord',
        'vendorUrl' => '/rest/api/2/auditing/record',
        'method' => 'POST',
        'description' => 'Store a record in Audit Log.',
        'custom' => true,
        'example' => '',
        'schema' => '',
        'args' => array (
            'remoteAddress' => array (
                'schema' => '{"type":"string"}',
                'type' => 'string',
                'info' => 'Record remote address.',
                'required' => false,
            ),
            'authorKey' => array (
                'schema' => '{"type":"string"}',
                'type' => 'string',
                'info' => 'Record authorkey.',
                'required' => false,
            ),
            'eventSource' => array (
                'schema' => '{"type":"string"}',
                'type' => 'string',
                'info' => 'Record event source.',
                'required' => false,
            ),
            'description' => array (
                'schema' => '{"type":"string"}',
                'type' => 'string',
                'info' => 'Record description.',
                'required' => false,
            ),
            'summary' => array (
                'example' => '"User created"',
                'schema' => '{"type":"string"}',
                'type' => 'string',
                'info' => 'Record summary.',
                'required' => false,
            ),
            'created' => array (
                'example' => 'null',
                'schema' => '{"type":"string"}',
                'type' => 'string',
                'info' => 'Record created.',
                'required' => false,
            ),
            'category' => array (
                'example' => '"USER_MANAGEMENT"',
                'schema' => '{"type":"string"}',
                'type' => 'string',
                'info' => 'Record category.',
                'required' => false,
            ),
            'objectItemId' => array (
                'type' => 'string',
                'example' => '{"name":"user","typeName":"USER","parentId":"1","parentName":"JIRA Internal Directory"}',
                'schema' => '{"$ref":"#/definitions/associated-item"}',
                'info' => 'Record ObjectItem identifier.',
                'required' => false,
            ),
            'objectItemName' => array (
                'type' => 'string',
                'example' => '{"typeName":"USER","parentId":"1","parentName":"JIRA Internal Directory"}',
                'schema' => '{"$ref":"#/definitions/associated-item"}',
                'info' => 'Record ObjectItem name.',
                'required' => false,
            ),
            'objectItemTypeName' => array (
                'type' => 'string',
                'example' => '{"parentId":"1","parentName":"JIRA Internal Directory"}',
                'schema' => '{"$ref":"#/definitions/associated-item"}',
                'info' => 'Record ObjectItem type name.',
                'required' => false,
            ),
            'objectItemParentId' => array (
                'type' => 'string',
                'example' => '{"parentName":"JIRA Internal Directory"}',
                'schema' => '{"$ref":"#/definitions/associated-item"}',
                'info' => 'Record ObjectItem parent identifier.',
                'required' => false,
            ),
            'objectItemParentName' => array (
                'type' => 'string',
                'example' => '{}',
                'schema' => '{"$ref":"#/definitions/associated-item"}',
                'info' => 'Record ObjectItem parent name.',
                'required' => false,
            ),
            'changedValues' => array (
                'type' => 'Array',
                'example' => '[{"fieldName":"email","changedFrom":"user@atlassian.com","changedTo":"newuser@atlassian.com"}]',
                'schema' => '{"type":"array","items":{"title":"Changed Value","type":"object","properties":{"fieldName":{"type":"string"},"changedFrom":{"type":"string"},"changedTo":{"type":"string"}},"additionalProperties":false}}',
                'info' => 'Record changed values. Example [{"fieldName":"email","changedFrom":"user@atlassian.com","changedTo":"newuser@atlassian.com"}].',
                'required' => false,
            ),
            'associatedItems' => array (
                'type' => 'Array',
                'example' => '[{"id":"jira-software-users","name":"jira-software-users","typeName":"GROUP","parentId":"1","parentName":"JIRA Internal Directory"}]',
                'schema' => '{"type":"array","items":{"$ref":"#/definitions/associated-item"}}',
                'info' => 'Record associated items. Example [{"id":"jira-software-users","name":"jira-software-users","typeName":"GROUP","parentId":"1","parentName":"JIRA Internal Directory"}].',
                'required' => false,
            ),
        ),
    ),
    array (
        'name' => 'getAllSystemAvatars',
        'vendorUrl' => '/rest/api/2/avatar/{type}/system',
        'method' => 'GET',
        'description' => 'Returns all system avatars of the given type.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'type' => array (
                'required' => true,
                'type' => 'PreString',
                'info' => 'System avatar type',
            ),
        ),
    ),
    array (
        'name' => 'getCommentPropertiesKeys',
        'vendorUrl' => '/rest/api/2/comment/{commentId}/properties',
        'method' => 'GET',
        'description' => 'Returns the keys of all properties for the comment identified by the key or by the id.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'commentId' => array (
                'required' => true,
                'type' => 'PreString',
                'info' => 'Comment identified.',
            ),
        ),
    ),
    array (
        'name' => 'deleteCommentProperty',
        'vendorUrl' => '/rest/api/2/comment/{commentId}/properties/{propertyKey}',
        'method' => 'DELETE',
        'description' => 'Removes the property from the comment identified by the key or by the id. Ths user removing the property is requiredto have permissions to administer the comment.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'commentId' => array (
                'required' => true,
                'type' => 'string',
                'info' => 'Comment identified.',
            ),
            'propertyKey' => array (
                'required' => true,
                'type' => 'string',
                'info' => 'Property key.',
            ),
        ),
    ),
    array (
        'name' => 'setCommentProperty',
        'vendorUrl' => '/rest/api/2/comment/{commentId}/properties/{propertyKey}',
        'method' => 'PUT',
        'description' => 'Sets the value of the specified comment\'s property.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'commentId' => array (
                'required' => true,
                'type' => 'string',
                'info' => 'Comment identified.',
            ),
            'propertyKey' => array (
                'required' => true,
                'type' => 'string',
                'info' => 'Property key.',
            ),
        ),
    ),
    array (
        'name' => 'getCommentProperty',
        'vendorUrl' => '/rest/api/2/comment/{commentId}/properties/{propertyKey}',
        'method' => 'GET',
        'description' => 'Returns the value of the property with a given key from the comment identified by the key or by the id.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'commentId' => array (
                'required' => true,
                'type' => 'string',
                'info' => 'Comment identified.',
            ),
            'propertyKey' => array (
                'required' => true,
                'type' => 'string',
                'info' => 'Property key.',
            ),
        ),
    ),
    array (
        'name' => 'createComponent',
        'vendorUrl' => '/rest/api/2/component',
        'method' => 'POST',
        'description' => 'Create a component.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'name' => array (
                'example' => '"Component 1"',
                'schema' => '{"type":"string"}',
                'type' => 'string',
                'info' => 'Component name.',
                'required' => true,
            ),
            'description' => array (
                'example' => '"This is a JIRA component"',
                'schema' => '{"type":"string"}',
                'type' => 'string',
                'info' => 'Component description.',
                'required' => false,
            ),
            'leadUserName' => array (
                'example' => '"fred"',
                'schema' => '{"type":"string"}',
                'type' => 'string',
                'info' => 'Component lead user name.',
                'required' => false,
            ),
            'assigneeType' => array (
                'example' => '"PROJECT_LEAD"',
                'schema' => '{"type":"string","enum":["PROJECT_DEFAULT","COMPONENT_LEAD","PROJECT_LEAD","UNASSIGNED"]}',
                'type' => 'string',
                'info' => 'Component assignee type. One of "PROJECT_DEFAULT","COMPONENT_LEAD","PROJECT_LEAD","UNASSIGNED".',
                'required' => false,
            ),
            'isAssigneeTypeValid' => array (
                'example' => 'false',
                'schema' => '{"type":"boolean"}',
                'type' => 'boolean',
                'info' => 'Component is assignee type valid.',
                'required' => false,
            ),
            'project' => array (
                'example' => '"PROJECTKEY"',
                'schema' => '{"type":"string"}',
                'type' => 'string',
                'info' => 'Project key.',
                'required' => false,
            ),
            'projectId' => array (
                'example' => '10000',
                'schema' => '{"type":"integer"}',
                'type' => 'integer',
                'info' => 'Project identifier.',
                'required' => false,
            ),
            'lead' => array (
                'schema' => '{"$ref":"#/definitions/user"}',
                'type' => 'string',
                'info' => 'Component lead.',
                'required' => false,
            ),
            'assignee' => array (
                'schema' => '{"$ref":"#/definitions/user"}',
                'type' => 'string',
                'info' => 'Component assignee.',
                'required' => false,
            ),
            'realAssigneeType' => array (
                'schema' => '{"type":"string","enum":["PROJECT_DEFAULT","COMPONENT_LEAD","PROJECT_LEAD","UNASSIGNED"]}',
                'type' => 'string',
                'info' => 'Real assignee type. One of "PROJECT_DEFAULT","COMPONENT_LEAD","PROJECT_LEAD","UNASSIGNED"',
                'required' => false,
            ),
            'realAssignee' => array (
                'schema' => '{"$ref":"#/definitions/user"}',
                'type' => 'string',
                'info' => 'Component real assignee.',
                'required' => false,
            ),
        ),
    ),
    array (
        'name' => 'updateComponent',
        'vendorUrl' => '/rest/api/2/component/{id}',
        'method' => 'PUT',
        'description' => 'Modify a component.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'id' => array (
                'required' => true,
                'type' => 'string',
                'info' => 'Component identifier.',
            ),
            'name' => array (
                'example' => '"Component 1"',
                'schema' => '{"type":"string"}',
                'type' => 'string',
                'info' => 'Component name.',
                'required' => false,
            ),
            'description' => array (
                'example' => '"This is a JIRA component"',
                'schema' => '{"type":"string"}',
                'type' => 'string',
                'info' => 'Component description.',
                'required' => false,
            ),
            'leadUserName' => array (
                'example' => '"fred"',
                'schema' => '{"type":"string"}',
                'type' => 'string',
                'info' => 'Component lead user name.',
                'required' => false,
            ),
            'assigneeType' => array (
                'example' => '"PROJECT_LEAD"',
                'schema' => '{"type":"string","enum":["PROJECT_DEFAULT","COMPONENT_LEAD","PROJECT_LEAD","UNASSIGNED"]}',
                'type' => 'string',
                'info' => 'Assignee type. One of "PROJECT_DEFAULT","COMPONENT_LEAD","PROJECT_LEAD","UNASSIGNED".',
                'required' => false,
            ),
            'isAssigneeTypeValid' => array (
                'example' => 'false',
                'schema' => '{"type":"boolean"}',
                'type' => 'boolean',
                'info' => 'Is assignee type valid.',
                'required' => false,
            ),
            'project' => array (
                'example' => '"PROJECTKEY"',
                'schema' => '{"type":"string"}',
                'type' => 'string',
                'info' => 'Component project.',
                'required' => false,
            ),
            'projectId' => array (
                'example' => '10000',
                'schema' => '{"type":"integer"}',
                'type' => 'integer',
                'info' => 'Component project identifier.',
                'required' => false,
            ),
            'lead' => array (
                'schema' => '{"$ref":"#/definitions/user"}',
                'type' => 'string',
                'info' => 'Component lead.',
                'required' => false,
            ),
            'assignee' => array (
                'schema' => '{"$ref":"#/definitions/user"}',
                'type' => 'string',
                'info' => 'Component assignee.',
                'required' => false,
            ),
            'realAssigneeType' => array (
                'schema' => '{"type":"string","enum":["PROJECT_DEFAULT","COMPONENT_LEAD","PROJECT_LEAD","UNASSIGNED"]}',
                'type' => 'string',
                'info' => 'Real assignee type. One of "PROJECT_DEFAULT","COMPONENT_LEAD","PROJECT_LEAD","UNASSIGNED".',
                'required' => false,
            ),
            'realAssignee' => array (
                'schema' => '{"$ref":"#/definitions/user"}',
                'type' => 'string',
                'info' => 'Real assignee.',
                'required' => false,
            ),
        ),
    ),
    array (
        'name' => 'getComponent',
        'vendorUrl' => '/rest/api/2/component/{id}',
        'method' => 'GET',
        'description' => 'Returns a project component.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'id' => array (
                'required' => true,
                'type' => 'PreString',
                'info' => 'Component identifier.',
            ),
        ),
    ),
    array (
        'name' => 'deleteComponent',
        'vendorUrl' => '/rest/api/2/component/{id}',
        'method' => 'DELETE',
        'description' => 'Delete a project component.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'id' => array (
                'required' => true,
                'type' => 'PreString',
                'info' => 'Component identifier.',
            ),
            'moveIssuesTo' => array (
                'type' => 'string',
                'info' => 'The new component applied to issues whose \'id\' component will be deleted. If this value is null, then the \'id\' component is simply removed from the related isues.',
                'required' => false,
            ),
        ),
    ),
    array (
        'name' => 'getComponentIssuesCounts',
        'vendorUrl' => '/rest/api/2/component/{id}/relatedIssueCounts',
        'method' => 'GET',
        'description' => 'Returns counts of issues related to this component.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'id' => array (
                'required' => true,
                'type' => 'string',
                'info' => 'Component identifier.',
            ),
        ),
    ),
    array (
        'name' => 'getConfiguration',
        'vendorUrl' => '/rest/api/2/configuration',
        'method' => 'GET',
        'description' => 'Returns the information if the optional features in JIRA are enabled or disabled.',
        'example' => '',
        'schema' => '',
        'args' => array (),
    ),
    array (
        'name' => 'getSelectedTimeTracking',
        'vendorUrl' => '/rest/api/2/configuration/timetracking',
        'method' => 'GET',
        'description' => 'Returns the currently selected time-tracking implementation.',
        'example' => '',
        'schema' => '',
        'args' => array (),
    ),
    array (
        'name' => 'selectTimeTracking',
        'vendorUrl' => '/rest/api/2/configuration/timetracking',
        'method' => 'PUT',
        'description' => 'Selects a time tracking implementation.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'key' => array (
                'example' => '"JIRA"',
                'schema' => '{"type":"string"}',
                'type' => 'string',
                'info' => 'Implementation key.',
                'required' => true,
            ),
            'name' => array (
                'schema' => '{"type":"string"}',
                'type' => 'PreString',
                'info' => 'Implementation name.',
                'required' => false,
            ),
            'url' => array (
                'schema' => '{"type":"string"}',
                'type' => 'PreString',
                'info' => 'Implementation Url.',
                'required' => false,
            ),
        ),
    ),
    array (
        'name' => 'disableTimeTracking',
        'vendorUrl' => '/rest/api/2/configuration/timetracking',
        'method' => 'DELETE',
        'description' => 'Disables time tracking.',
        'example' => '',
        'schema' => '',
        'args' => array (),
    ),
    array (
        'name' => 'getTimeTrackingList',
        'vendorUrl' => '/rest/api/2/configuration/timetracking/list',
        'method' => 'GET',
        'description' => 'Retrieve the list of available time tracking implementations.',
        'example' => '',
        'schema' => '',
        'args' => array (),
    ),
    array (
        'name' => 'getTimeTrackingConfiguration',
        'vendorUrl' => '/rest/api/2/configuration/timetracking/options',
        'method' => 'GET',
        'description' => 'Returns the configuration options for time tracking.',
        'example' => '',
        'schema' => '',
        'args' => array (),
    ),
    array (
        'name' => 'setTimeTrackingConfiguration',
        'vendorUrl' => '/rest/api/2/configuration/timetracking/options',
        'method' => 'PUT',
        'description' => 'Sets the options for time tracking.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'workingHoursPerDay' => array (
                'schema' => '{"type":"number"}',
                'type' => 'number',
                'info' => 'Working hours per day.',
                'required' => false,
            ),
            'workingDaysPerWeek' => array (
                'schema' => '{"type":"number"}',
                'type' => 'number',
                'info' => 'Working days per week.',
                'required' => false,
            ),
            'timeFormat' => array (
                'schema' => '{"type":"string","enum":["pretty","days","hours"]}',
                'type' => 'string',
                'info' => 'Time format. One of "pretty","days","hours".',
                'required' => false,
            ),
            'defaultUnit' => array (
                'schema' => '{"type":"string","enum":["minute","hour","day","week"]}',
                'type' => 'string',
                'info' => 'Default unit. One of "minute","hour","day","week".',
                'required' => false,
            ),
        ),
    ),
    array (
        'name' => 'getSingleCustomFieldOption',
        'vendorUrl' => '/rest/api/2/customFieldOption/{id}',
        'method' => 'GET',
        'description' => 'Returns a full representation of the Custom Field Option that has the given id.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'id' => array (
                'required' => true,
                'type' => 'string',
                'info' => 'Option identifier.',
            ),
        ),
    ),
    array (
        'name' => 'getDashboards',
        'vendorUrl' => '/rest/api/2/dashboard',
        'method' => 'GET',
        'description' => 'Returns a list of all dashboards, optionally filtering them.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'filter' => array (
                'type' => 'string',
                'info' => 'An optional filter that is applied to the list of dashboards. Example "favourite", "my".',
                'required' => false,
            ),
            'startAt' => array (
                'type' => 'int',
                'info' => 'The index of the first dashboard to return (0-based). must be 0 or a multiple ofmaxResults.',
                'required' => false,
            ),
            'maxResults' => array (
                'type' => 'int',
                'info' => 'A hint as to the the maximum number of dashboards to return in each call.',
                'required' => false,
            ),
        ),
    ),
    array (
        'name' => 'getSingleDashboard',
        'vendorUrl' => '/rest/api/2/dashboard/{id}',
        'method' => 'GET',
        'description' => 'Returns a single dashboard.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'id' => array (
                'required' => true,
                'type' => 'PreString',
                'info' => 'Dashboard identifier.',
            ),
        ),
    ),
    array (
        'name' => 'getDashboardPropertiesKeys',
        'vendorUrl' => '/rest/api/2/dashboard/{dashboardId}/items/{itemId}/properties',
        'method' => 'GET',
        'description' => 'Returns the keys of all properties for the dashboard item identified by the id.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'dashboardId' => array (
                'required' => true,
                'type' => 'string',
                'info' => 'Dashboard identifier.',
            ),
            'itemId' => array (
                'required' => true,
                'type' => 'PreString',
                'info' => 'Item identifier.',
            ),
        ),
    ),
    array (
        'name' => 'deleteDashboardProperty',
        'vendorUrl' => '/rest/api/2/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}',
        'method' => 'DELETE',
        'description' => 'Removes the property from the dashboard item identified by the key or by the id.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'dashboardId' => array (
                'required' => true,
                'type' => 'string',
                'info' => 'Dashboard identifier.',
            ),
            'itemId' => array (
                'required' => true,
                'type' => 'string',
                'info' => 'Item identifier.',
            ),
            'propertyKey' => array (
                'required' => true,
                'type' => 'string',
                'info' => 'Property key.',
            ),
        ),
    ),
    array (
        'name' => 'setDashboardProperty',
        'vendorUrl' => '/rest/api/2/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}',
        'method' => 'PUT',
        'description' => 'Sets the value of the specified dashboard item\'s property.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'dashboardId' => array (
                'required' => true,
                'type' => 'PreString',
                'info' => 'Dashboard identifier.',
            ),
            'itemId' => array (
                'required' => true,
                'type' => 'PreString',
                'info' => 'Item identifier.',
            ),
            'propertyKey' => array (
                'required' => true,
                'type' => 'PreString',
                'info' => 'Property key.',
            ),
        ),
    ),
    array (
        'name' => 'getDashboardProperty',
        'vendorUrl' => '/rest/api/2/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}',
        'method' => 'GET',
        'description' => 'Returns the value of the property with a given key from the dashboard item identified by the id.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'dashboardId' => array (
                'required' => true,
                'type' => 'string',
                'info' => 'Dashboard identifier.',
            ),
            'itemId' => array (
                'required' => true,
                'type' => 'string',
                'info' => 'Item identifier.',
            ),
            'propertyKey' => array (
                'required' => true,
                'type' => 'string',
                'info' => 'Property key.',
            ),
        ),
    ),
    array (
        'name' => 'createCustomField',
        'vendorUrl' => '/rest/api/2/field',
        'method' => 'POST',
        'description' => 'Creates a custom field using a definition.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'name' => array (
                'example' => '"New custom field"',
                'schema' => '{"type":"string"}',
                'type' => 'string',
                'info' => 'Custom field name.',
                'required' => true,
            ),
            'description' => array (
                'example' => '"Custom field for picking groups"',
                'schema' => '{"type":"string"}',
                'type' => 'string',
                'info' => 'Custom field description.',
                'required' => false,
            ),
            'type' => array (
                'example' => '"com.atlassian.jira.plugin.system.customfieldtypes:grouppicker"',
                'schema' => '{"type":"string"}',
                'type' => 'string',
                'info' => 'Custom field type.',
                'required' => false,
            ),
            'searcherKey' => array (
                'example' => '"com.atlassian.jira.plugin.system.customfieldtypes:grouppickersearcher"',
                'schema' => '{"type":"string"}',
                'type' => 'string',
                'info' => 'Custom field searcher key.',
                'required' => false,
            ),
        ),
    ),
    array (
        'name' => 'getFields',
        'vendorUrl' => '/rest/api/2/field',
        'method' => 'GET',
        'description' => 'Returns a list of all fields, both System and Custom.',
        'example' => '',
        'schema' => '',
        'args' => array (),
    ),
    array (
        'name' => 'createSelectFieldOption',
        'vendorUrl' => '/rest/api/2/field/{fieldKey}/option',
        'method' => 'POST',
        'description' => 'Creates an option for a select list issue field, for a given field key.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'fieldKey' => array (
                'required' => true,
                'type' => 'PreString',
                'info' => 'Field key.',
            ),
            'value' => array (
                'schema' => '{"type":"string"}',
                'type' => 'string',
                'info' => 'Option value.',
                'required' => false,
            ),
        ),
    ),
    array (
        'name' => 'getSelectFieldOptions',
        'vendorUrl' => '/rest/api/2/field/{fieldKey}/option',
        'method' => 'GET',
        'description' => 'Returns all options defined for a select list issue field, for a given field key.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'fieldKey' => array (
                'required' => true,
                'type' => 'PreString',
                'info' => 'Field key.',
            ),
            'startAt' => array (
                'type' => 'long',
                'info' => 'The starting index of the returned objects. Base index: 0.',
                'required' => false,
            ),
            'maxResults' => array (
                'type' => 'int',
                'info' => 'The maximum number of items to return per page. Default: 50.',
                'required' => false,
            ),
        ),
    ),
    array (
        'name' => 'updateSelectFieldOptions',
        'vendorUrl' => '/rest/api/2/field/{fieldKey}/option/{optionId}',
        'method' => 'PUT',
        'description' => 'Updates an option for a select list issue field, for a given field key and option Id.',
        'custom' => true,
        'example' => '',
        'schema' => '',
        'args' => array (
            'fieldKey' => array (
                'required' => true,
                'type' => 'string',
                'info' => 'Field key.',
            ),
            'optionId' => array (
                'required' => true,
                'type' => 'string',
                'info' => 'Option identifier.',
            ),
            'id' => array (
                'required' => true,
                'type' => 'integer',
                'info' => 'Identifier.',
            ),
            'value' => array (
                'example' => '"Team 1"',
                'schema' => '{"type":"string"}',
                'type' => 'string',
                'info' => 'Option value.',
                'required' => true,
            ),
            'propertiesLeaderName' => array (
                'type' => 'string',
                'example' => '{"leader":{"email":"lname@example.com"},"members":42,"description":"The team\'s description","founded":"2016-06-06"}',
                'schema' => '{"title":"Object Node","type":"object"}',
                'info' => 'Options leader name.',
                'required' => false,
            ),
            'propertiesLeaderEmail' => array (
                'type' => 'string',
                'example' => '{"members":42,"description":"The team\'s description","founded":"2016-06-06"}',
                'schema' => '{"title":"Object Node","type":"object"}',
                'info' => 'Options leader email.',
                'required' => false,
            ),
            'propertiesMembers' => array (
                'type' => 'string',
                'example' => '{"description":"The team\'s description","founded":"2016-06-06"}',
                'schema' => '{"title":"Object Node","type":"object"}',
                'info' => 'Options members.',
                'required' => false,
            ),
            'propertiesDescription' => array (
                'type' => 'string',
                'example' => '{"founded":"2016-06-06"}',
                'schema' => '{"title":"Object Node","type":"object"}',
                'info' => 'Options description.',
                'required' => false,
            ),
            'configScopeProjects' => array (
                'type' => 'string',
                'example' => '{"scope":{"projects":[10001,10020]},"attributes":[]}',
                'schema' => '{"title":"Issue Field Option Config","type":"object","properties":{"scope":{"title":"Issue Field Option Scope","type":"object","properties":{"projects":{"type":"array","items":{"type":"integer"}}},"additionalProperties":false},"attributes":{"type":"array","items":{"type":"string","enum":["notSelectable"]}}},"additionalProperties":false}',
                'info' => 'Comma separated options config scope projects identifier.',
                'required' => false,
            ),
            'configAttributes' => array (
                'type' => 'Array',
                'example' => '{"attributes":[]}',
                'schema' => '{"title":"Issue Field Option Config","type":"object","properties":{"scope":{"title":"Issue Field Option Scope","type":"object","properties":{"projects":{"type":"array","items":{"type":"integer"}}},"additionalProperties":false},"attributes":{"type":"array","items":{"type":"string","enum":["notSelectable"]}}},"additionalProperties":false}',
                'info' => 'Options config attributes.',
                'required' => false,
            ),
        ),
    ),
    array (
        'name' => 'getSelectFieldSingleOption',
        'vendorUrl' => '/rest/api/2/field/{fieldKey}/option/{optionId}',
        'method' => 'GET',
        'description' => 'Returns an option for a select list issue field, for a given field key and option Id.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'fieldKey' => array (
                'required' => true,
                'type' => 'string',
                'info' => 'Field key.',
            ),
            'optionId' => array (
                'required' => true,
                'type' => 'string',
                'info' => 'Option identifier.',
            ),
        ),
    ),
    array (
        'name' => 'deleteSelectFieldSingleOption',
        'vendorUrl' => '/rest/api/2/field/{fieldKey}/option/{optionId}',
        'method' => 'DELETE',
        'description' => 'Deletes an option from a select list issue field, for a given field key and option Id.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'fieldKey' => array (
                'required' => true,
                'type' => 'PreString',
                'info' => 'Field key.',
            ),
            'optionId' => array (
                'required' => true,
                'type' => 'PreString',
                'info' => 'Option identifier.',
            ),
        ),
    ),
    array (
        'name' => 'getAvailableSelectFieldOptions',
        'vendorUrl' => '/rest/api/2/field/{fieldKey}/option/suggestions/edit',
        'method' => 'GET',
        'description' => 'Returns the options defined for a select list issue field that are available to the currently logged-in user and can be assigned to an issue, for a given field key.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'fieldKey' => array (
                'required' => true,
                'type' => 'PreString',
                'info' => 'Field key.',
            ),
            'startAt' => array (
                'type' => 'long',
                'info' => 'The starting index of the returned objects. Base index: 0.',
                'required' => false,
            ),
            'maxResults' => array (
                'type' => 'int',
                'info' => 'The maximum number of items to return per page. Default: 50.',
                'required' => false,
            ),
            'projectId' => array (
                'type' => 'long',
                'info' => 'Only options available for this project will be returned.',
                'required' => false,
            ),
        ),
    ),
    array (
        'name' => 'searchSelectFieldOptions',
        'vendorUrl' => '/rest/api/2/field/{fieldKey}/option/suggestions/search',
        'method' => 'GET',
        'description' => 'Returns the options defined for a select list issue field that are available to the currently logged-in user, for a given field key. The list of options will be paginated.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'fieldKey' => array (
                'required' => true,
                'type' => 'PreString',
                'info' => 'Field key.',
            ),
            'startAt' => array (
                'type' => 'long',
                'info' => 'The starting index of the returned objects. Base index: 0.',
                'required' => false,
            ),
            'maxResults' => array (
                'type' => 'int',
                'info' => 'The maximum number of items to return per page. Default: 50.',
                'required' => false,
            ),
            'projectId' => array (
                'type' => 'long',
                'info' => 'Only options available for this project will be returned.',
                'required' => false,
            ),
        ),
    ),
    array (
        'name' => 'createFilter',
        'vendorUrl' => '/rest/api/2/filter',
        'method' => 'POST',
        'description' => 'Creates a new filter, and returns newly created filter.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'name' => array (
                'example' => '"All Open Bugs"',
                'schema' => '{"type":"string"}',
                'type' => 'string',
                'info' => 'New filter name.',
                'required' => true,
            ),
            'description' => array (
                'example' => '"Lists all open bugs"',
                'schema' => '{"type":"string"}',
                'type' => 'string',
                'info' => 'New filter description.',
                'required' => false,
            ),
            'jql' => array (
                'example' => '"type = Bug and resolution is empty"',
                'schema' => '{"type":"string"}',
                'type' => 'string',
                'info' => 'New filter Jql string.',
                'required' => false,
            ),
            'expand' => array (
                'type' => 'string',
                'info' => 'The parameters to expand.',
                'required' => false,
            ),
            'favourite' => array (
                'example' => 'true',
                'schema' => '{"type":"boolean"}',
                'type' => 'boolean',
                'info' => 'New filter is favourite.',
                'required' => false,
            ),
            'owner' => array (
                'schema' => '{"$ref":"#/definitions/user"}',
                'type' => 'string',
                'info' => 'Owner.',
                'required' => false,
            ),
            'viewUrl' => array (
                'schema' => '{"type":"string","format":"uri"}',
                'type' => 'string',
                'info' => 'View Url.',
                'required' => false,
            ),
            'searchUrl' => array (
                'schema' => '{"type":"string","format":"uri"}',
                'type' => 'string',
                'info' => 'Search Url.',
                'required' => false,
            ),
            'sharePermissions' => array (
                'schema' => '{"type":"array","items":{"title":"Filter Permission","type":"object","properties":{"id":{"type":"integer"},"type":{"type":"string"},"project":{"title":"Project","type":"object","properties":{"id":{"type":"string"},"key":{"type":"string"},"description":{"type":"string"},"lead":{"$ref":"#/definitions/user"},"components":{"type":"array","items":{"title":"Component","type":"object","properties":{"name":{"type":"string"},"description":{"type":"string"},"lead":{"$ref":"#/definitions/user"},"leadUserName":{"type":"string"},"assigneeType":{"type":"string","enum":["PROJECT_DEFAULT","COMPONENT_LEAD","PROJECT_LEAD","UNASSIGNED"]},"assignee":{"$ref":"#/definitions/user"},"realAssigneeType":{"type":"string","enum":["PROJECT_DEFAULT","COMPONENT_LEAD","PROJECT_LEAD","UNASSIGNED"]},"realAssignee":{"$ref":"#/definitions/user"},"isAssigneeTypeValid":{"type":"boolean"},"project":{"type":"string"},"projectId":{"type":"integer"}},"additionalProperties":false,"required":["isAssigneeTypeValid"]}},"issueTypes":{"type":"array","items":{"title":"Issue Type","type":"object","properties":{"id":{"type":"string"},"description":{"type":"string"},"iconUrl":{"type":"string"},"name":{"type":"string"},"subtask":{"type":"boolean"},"avatarId":{"type":"integer"}},"additionalProperties":false,"required":["subtask"]}},"url":{"type":"string"},"email":{"type":"string"},"assigneeType":{"type":"string","enum":["PROJECT_LEAD","UNASSIGNED"]},"versions":{"type":"array","items":{"title":"Version","type":"object","properties":{"id":{"type":"string"},"description":{"type":"string"},"name":{"type":"string"},"archived":{"type":"boolean"},"released":{"type":"boolean"},"overdue":{"type":"boolean"},"userStartDate":{"type":"string"},"userReleaseDate":{"type":"string"},"project":{"type":"string"},"projectId":{"type":"integer"},"moveUnfixedIssuesTo":{"type":"string","format":"uri"},"operations":{"type":"array","items":{"title":"Simple Link","type":"object","properties":{"id":{"type":"string"},"styleClass":{"type":"string"},"iconClass":{"type":"string"},"label":{"type":"string"},"title":{"type":"string"},"href":{"type":"string"},"weight":{"type":"integer"}},"additionalProperties":false}},"remotelinks":{"type":"array","items":{"title":"Remote Entity Link","type":"object","properties":{"name":{"type":"string"},"link":[]},"additionalProperties":false}}},"additionalProperties":false}},"name":{"type":"string"},"roles":{"type":"object","patternProperties":{".+":{"type":"string","format":"uri"}},"additionalProperties":false},"avatarUrls":{"type":"object","patternProperties":{".+":{"type":"string"}},"additionalProperties":false},"projectKeys":{"type":"array","items":{"type":"string"}},"projectCategory":{"title":"Project Category","type":"object","properties":{"id":{"type":"string"},"name":{"type":"string"},"description":{"type":"string"}},"additionalProperties":false},"projectTypeKey":{"type":"string"}},"additionalProperties":false},"role":{"title":"Project Role","type":"object","properties":{"name":{"type":"string"},"id":{"type":"integer"},"description":{"type":"string"},"actors":{"type":"array","items":{"title":"Role Actor","type":"object","properties":{"id":{"type":"integer"},"displayName":{"type":"string"},"type":{"type":"string"},"name":{"type":"string"},"avatarUrl":{"type":"string","format":"uri"}},"additionalProperties":false}}},"additionalProperties":false},"group":{"$ref":"#/definitions/group"}},"additionalProperties":false}}',
                'type' => 'Array',
                'info' => 'Filter Permission.',
                'required' => false,
            ),
            'sharedUsers' => array (
                'schema' => '{"title":"User Bean List Wrapper","type":"object","properties":{"size":{"type":"integer"},"max-results":{"type":"integer"},"start-index":{"type":"integer"},"end-index":{"type":"integer"},"items":{"type":"array","items":{"$ref":"#/definitions/user"}}},"additionalProperties":false,"required":["size","max-results","start-index","end-index"]}',
                'type' => 'JSON',
                'info' => 'User Bean List Wrapper.',
                'required' => false,
            ),
            'subscriptions' => array (
                'schema' => '{"title":"Filter Subscription Bean List Wrapper","type":"object","properties":{"size":{"type":"integer"},"max-results":{"type":"integer"},"start-index":{"type":"integer"},"end-index":{"type":"integer"},"items":{"type":"array","items":{"title":"Filter Subscription","type":"object","properties":{"id":{"type":"integer"},"user":{"$ref":"#/definitions/user"},"group":{"$ref":"#/definitions/group"}},"additionalProperties":false}}},"additionalProperties":false,"required":["size","max-results","start-index","end-index"]}',
                'type' => 'JSON',
                'info' => 'Filter Subscription Bean List Wrapper.',
                'required' => false,
            ),
        ),
    ),
    array (
        'name' => 'updateFilter',
        'vendorUrl' => '/rest/api/2/filter/{id}',
        'method' => 'PUT',
        'description' => 'Updates an existing filter, and returns its new value.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'id' => array (
                'required' => true,
                'schema' => '{"type":"string"}',
                'type' => 'string',
                'info' => 'Filter identifier.',
            ),
            'name' => array (
                'example' => '"All Open Bugs"',
                'schema' => '{"type":"string"}',
                'type' => 'string',
                'info' => 'New filter name.',
                'required' => true,
            ),
            'description' => array (
                'example' => '"Lists all open bugs"',
                'schema' => '{"type":"string"}',
                'type' => 'string',
                'info' => 'New filter description.',
                'required' => false,
            ),
            'jql' => array (
                'example' => '"type = Bug and resolution is empty"',
                'schema' => '{"type":"string"}',
                'type' => 'string',
                'info' => 'New filter Jql string.',
                'required' => false,
            ),
            'expand' => array (
                'type' => 'string',
                'info' => 'The parameters to expand.',
                'required' => false,
            ),
            'favourite' => array (
                'example' => 'true',
                'schema' => '{"type":"boolean"}',
                'type' => 'boolean',
                'info' => 'New filter is favourite.',
                'required' => false,
            ),
            'owner' => array (
                'schema' => '{"$ref":"#/definitions/user"}',
                'type' => 'string',
                'info' => 'Owner.',
                'required' => false,
            ),
            'viewUrl' => array (
                'schema' => '{"type":"string","format":"uri"}',
                'type' => 'string',
                'info' => 'View Url.',
                'required' => false,
            ),
            'searchUrl' => array (
                'schema' => '{"type":"string","format":"uri"}',
                'type' => 'string',
                'info' => 'Search Url.',
                'required' => false,
            ),
            'sharePermissions' => array (
                'schema' => '{"type":"array","items":{"title":"Filter Permission","type":"object","properties":{"id":{"type":"integer"},"type":{"type":"string"},"project":{"title":"Project","type":"object","properties":{"id":{"type":"string"},"key":{"type":"string"},"description":{"type":"string"},"lead":{"$ref":"#/definitions/user"},"components":{"type":"array","items":{"title":"Component","type":"object","properties":{"name":{"type":"string"},"description":{"type":"string"},"lead":{"$ref":"#/definitions/user"},"leadUserName":{"type":"string"},"assigneeType":{"type":"string","enum":["PROJECT_DEFAULT","COMPONENT_LEAD","PROJECT_LEAD","UNASSIGNED"]},"assignee":{"$ref":"#/definitions/user"},"realAssigneeType":{"type":"string","enum":["PROJECT_DEFAULT","COMPONENT_LEAD","PROJECT_LEAD","UNASSIGNED"]},"realAssignee":{"$ref":"#/definitions/user"},"isAssigneeTypeValid":{"type":"boolean"},"project":{"type":"string"},"projectId":{"type":"integer"}},"additionalProperties":false,"required":["isAssigneeTypeValid"]}},"issueTypes":{"type":"array","items":{"title":"Issue Type","type":"object","properties":{"id":{"type":"string"},"description":{"type":"string"},"iconUrl":{"type":"string"},"name":{"type":"string"},"subtask":{"type":"boolean"},"avatarId":{"type":"integer"}},"additionalProperties":false,"required":["subtask"]}},"url":{"type":"string"},"email":{"type":"string"},"assigneeType":{"type":"string","enum":["PROJECT_LEAD","UNASSIGNED"]},"versions":{"type":"array","items":{"title":"Version","type":"object","properties":{"id":{"type":"string"},"description":{"type":"string"},"name":{"type":"string"},"archived":{"type":"boolean"},"released":{"type":"boolean"},"overdue":{"type":"boolean"},"userStartDate":{"type":"string"},"userReleaseDate":{"type":"string"},"project":{"type":"string"},"projectId":{"type":"integer"},"moveUnfixedIssuesTo":{"type":"string","format":"uri"},"operations":{"type":"array","items":{"title":"Simple Link","type":"object","properties":{"id":{"type":"string"},"styleClass":{"type":"string"},"iconClass":{"type":"string"},"label":{"type":"string"},"title":{"type":"string"},"href":{"type":"string"},"weight":{"type":"integer"}},"additionalProperties":false}},"remotelinks":{"type":"array","items":{"title":"Remote Entity Link","type":"object","properties":{"name":{"type":"string"},"link":[]},"additionalProperties":false}}},"additionalProperties":false}},"name":{"type":"string"},"roles":{"type":"object","patternProperties":{".+":{"type":"string","format":"uri"}},"additionalProperties":false},"avatarUrls":{"type":"object","patternProperties":{".+":{"type":"string"}},"additionalProperties":false},"projectKeys":{"type":"array","items":{"type":"string"}},"projectCategory":{"title":"Project Category","type":"object","properties":{"id":{"type":"string"},"name":{"type":"string"},"description":{"type":"string"}},"additionalProperties":false},"projectTypeKey":{"type":"string"}},"additionalProperties":false},"role":{"title":"Project Role","type":"object","properties":{"name":{"type":"string"},"id":{"type":"integer"},"description":{"type":"string"},"actors":{"type":"array","items":{"title":"Role Actor","type":"object","properties":{"id":{"type":"integer"},"displayName":{"type":"string"},"type":{"type":"string"},"name":{"type":"string"},"avatarUrl":{"type":"string","format":"uri"}},"additionalProperties":false}}},"additionalProperties":false},"group":{"$ref":"#/definitions/group"}},"additionalProperties":false}}',
                'type' => 'Array',
                'info' => 'Filter Permission.',
                'required' => false,
            ),
            'sharedUsers' => array (
                'schema' => '{"title":"User Bean List Wrapper","type":"object","properties":{"size":{"type":"integer"},"max-results":{"type":"integer"},"start-index":{"type":"integer"},"end-index":{"type":"integer"},"items":{"type":"array","items":{"$ref":"#/definitions/user"}}},"additionalProperties":false,"required":["size","max-results","start-index","end-index"]}',
                'type' => 'JSON',
                'info' => 'User Bean List Wrapper.',
                'required' => false,
            ),
            'subscriptions' => array (
                'schema' => '{"title":"Filter Subscription Bean List Wrapper","type":"object","properties":{"size":{"type":"integer"},"max-results":{"type":"integer"},"start-index":{"type":"integer"},"end-index":{"type":"integer"},"items":{"type":"array","items":{"title":"Filter Subscription","type":"object","properties":{"id":{"type":"integer"},"user":{"$ref":"#/definitions/user"},"group":{"$ref":"#/definitions/group"}},"additionalProperties":false}}},"additionalProperties":false,"required":["size","max-results","start-index","end-index"]}',
                'type' => 'JSON',
                'info' => 'Filter Subscription Bean List Wrapper.',
                'required' => false,
            ),
        ),
    ),
    array (
        'name' => 'deleteFilter',
        'vendorUrl' => '/rest/api/2/filter/{id}',
        'method' => 'DELETE',
        'description' => 'Delete a filter.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'id' => array (
                'required' => true,
                'type' => 'string',
                'info' => 'Filter identifier.',
            ),
        ),
    ),
    array (
        'name' => 'getFilter',
        'vendorUrl' => '/rest/api/2/filter/{id}',
        'method' => 'GET',
        'description' => 'Returns a filter given an id.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'id' => array (
                'required' => true,
                'type' => 'PreString',
                'info' => 'Filter identifier.',
            ),
            'expand' => array (
                'type' => 'string',
                'info' => 'The parameters to expand.',
                'required' => false,
            ),
        ),
    ),
    array (
        'name' => 'getFilterDefaultColumns',
        'vendorUrl' => '/rest/api/2/filter/{id}/columns',
        'method' => 'GET',
        'description' => 'Returns the default columns for the given filter.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'id' => array (
                'required' => true,
                'type' => 'PreString',
                'info' => 'Filter identifier.',
            ),
        ),
    ),
    array (
        'name' => 'setFilterDefaultColumns',
        'vendorUrl' => '/rest/api/2/filter/{id}/columns',
        'method' => 'PUT',
        'description' => 'Sets the default columns for the given filter.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'id' => array (
                'required' => true,
                'type' => 'PreString',
                'info' => 'Filter identifier.',
            ),
        ),
    ),
    array (
        'name' => 'resetFilterDefaultColumns',
        'vendorUrl' => '/rest/api/2/filter/{id}/columns',
        'method' => 'DELETE',
        'description' => 'Resets the columns for the given filter such that the filter no longer has its own column config.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'id' => array (
                'required' => true,
                'type' => 'string',
                'info' => '/rest/api/2/filter/{id}/columns',
            ),
        ),
    ),
    array (
        'name' => 'getFilterSharePermissions',
        'vendorUrl' => '/rest/api/2/filter/{id}/permission',
        'method' => 'GET',
        'description' => 'Returns all share permissions of the given filter.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'id' => array (
                'required' => true,
                'type' => 'string',
                'info' => 'Filter identifier.',
            ),
        ),
    ),
    array (
        'name' => 'addFilterSharePermissions',
        'vendorUrl' => '/rest/api/2/filter/{id}/permission',
        'method' => 'POST',
        'description' => 'Adds a share permissions to the given filter. Adding a global permission removes all previous permissions from the filter.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'id' => array (
                'required' => true,
                'type' => 'string',
                'info' => 'Filter identifier.',
            ),
            'type' => array (
                'example' => '"group"',
                'schema' => '{"type":"string"}',
                'type' => 'string',
                'info' => 'Filter type.',
                'required' => false,
            ),
            'groupname' => array (
                'example' => '"jira-administrators"',
                'schema' => '{"type":"string"}',
                'type' => 'tring',
                'info' => 'Filter groupname.',
                'required' => false,
            ),
            'projectId' => array (
                'schema' => '{"type":"string"}',
                'type' => 'tring',
                'info' => 'Filter project identifier.',
                'required' => false,
            ),
            'projectRoleId' => array (
                'schema' => '{"type":"string"}',
                'type' => 'string',
                'info' => 'Filter project role identifier.',
                'required' => false,
            ),
        ),
    ),
    array (
        'name' => 'getFilterSingleSharePermission',
        'vendorUrl' => '/rest/api/2/filter/{id}/permission/{permissionId}',
        'method' => 'GET',
        'description' => 'Returns a single share permission of the given filter.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'id' => array (
                'required' => true,
                'type' => 'string',
                'info' => 'Filter identifier.',
            ),
            'permissionId' => array (
                'required' => true,
                'type' => 'string',
                'info' => 'Permission identifier.',
            ),
        ),
    ),
    array (
        'name' => 'deleteFilterSingleSharePermission',
        'vendorUrl' => '/rest/api/2/filter/{id}/permission/{permissionId}',
        'method' => 'DELETE',
        'description' => 'Removes a share permissions from the given filter.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'id' => array (
                'required' => true,
                'type' => 'string',
                'info' => 'Filter identifier.',
            ),
            'permissionId' => array (
                'required' => true,
                'type' => 'string',
                'info' => 'Permission identifier.',
            ),
        ),
    ),
    array (
        'name' => 'getDefaultShareScope',
        'vendorUrl' => '/rest/api/2/filter/defaultShareScope',
        'method' => 'GET',
        'description' => 'Returns the default share scope of the logged-in user.',
        'example' => '',
        'schema' => '',
        'args' => array (),
    ),
    array (
        'name' => 'setDefaultShareScope',
        'vendorUrl' => '/rest/api/2/filter/defaultShareScope',
        'method' => 'PUT',
        'description' => 'Sets the default share scope of the logged-in user.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'scope' => array (
                'example' => '"GLOBAL"',
                'schema' => '{"type":"string","enum":["GLOBAL","AUTHENTICATED","PRIVATE"]}',
                'type' => 'string',
                'info' => 'Share scope. One of "GLOBAL","AUTHENTICATED","PRIVATE".',
                'required' => false,
            ),
        ),
    ),
    array (
        'name' => 'getFavouriteFilters',
        'vendorUrl' => '/rest/api/2/filter/favourite',
        'method' => 'GET',
        'description' => 'Returns the favourite filters of the logged-in user.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'expand' => array (
                'type' => 'string',
                'info' => 'The parameters to expand.',
                'required' => false,
            ),
        ),
    ),
    array (
        'name' => 'getMyFilters',
        'vendorUrl' => '/rest/api/2/filter/my',
        'method' => 'GET',
        'description' => 'Returns the owned filters of the logged-in user.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'expand' => array (
                'type' => 'string',
                'info' => 'The parameters to expand.',
                'required' => false,
            ),
            'includeFavourites' => array (
                'type' => 'boolean',
                'info' => 'Include favourites.',
                'required' => false,
            ),
        ),
    ),
    array (
        'name' => 'createGroup',
        'vendorUrl' => '/rest/api/2/group',
        'method' => 'POST',
        'description' => 'Creates a group by given group parameter.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'name' => array (
                'schema' => '{"type":"string"}',
                'type' => 'string',
                'info' => 'Group name.',
                'required' => true,
            ),
        ),
    ),
    array (
        'name' => 'deleteGroup',
        'vendorUrl' => '/rest/api/2/group',
        'method' => 'DELETE',
        'description' => 'Deletes a group by given group parameter.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'groupname' => array (
                'type' => 'string',
                'info' => 'The name of the group to delete.',
                'required' => true,
            ),
            'swapGroup' => array (
                'type' => 'string',
                'info' => 'Specify a different group to transfer the restrictions comments and worklogs to.',
                'required' => false,
            ),
        ),
    ),
    array (
        'name' => 'getUsersFromGroup',
        'vendorUrl' => '/rest/api/2/group/member',
        'method' => 'GET',
        'description' => 'Returns a paginated list of users who are members of the specified group and its subgroups.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'groupname' => array (
                'type' => 'string',
                'info' => 'A name of the group for which members will be returned.',
                'required' => true,
            ),
            'includeInactiveUsers' => array (
                'type' => 'booleanDefault: false',
                'info' => 'Inactive users will be included in the response if set to true.',
                'required' => false,
            ),
            'startAt' => array (
                'type' => 'longDefault: 0',
                'info' => 'The index of the first user in group to return (0 based).',
                'required' => false,
            ),
            'maxResults' => array (
                'type' => 'intDefault: 50',
                'info' => 'The maximum number of users to return (max 50).',
                'required' => false,
            ),
        ),
    ),
    array (
        'name' => 'addUserToGroup',
        'vendorUrl' => '/rest/api/2/group/user',
        'method' => 'POST',
        'description' => 'Adds given user to a group. Returns the current state of the group.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'groupname' => array (
                'type' => 'string',
                'info' => 'A name of requested group.',
                'required' => true,
            ),
            'name' => array (
                'example' => '"charlie"',
                'schema' => '{"type":"string"}',
                'type' => 'string',
                'info' => 'User name.',
                'required' => true,
            ),
        ),
    ),
    array (
        'name' => 'deleteUserFromGroup',
        'vendorUrl' => '/rest/api/2/group/user',
        'method' => 'DELETE',
        'description' => 'Removes given user from a group.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'groupname' => array (
                'type' => 'string',
                'info' => 'A name of requested group.',
                'required' => true,
            ),
            'username' => array (
                'type' => 'string',
                'info' => 'User to remove from a group.',
                'required' => true,
            ),
        ),
    ),
    array (
        'name' => 'findGroups',
        'vendorUrl' => '/rest/api/2/groups/picker',
        'method' => 'GET',
        'description' => 'Returns groups with substrings matching a given query.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'query' => array (
                'type' => 'string',
                'info' => 'A String to match groups agains.',
                'required' => false,
            ),
            'exclude' => array (
                'type' => 'string',
                'info' => 'Exclude group.',
                'required' => false,
            ),
            'maxResults' => array (
                'type' => 'int',
                'info' => 'Max results.',
                'required' => false,
            ),
            'userName' => array (
                'type' => 'string',
                'info' => 'User name.',
                'required' => false,
            ),
        ),
    ),
    array (
        'name' => 'findUsersAndGroups',
        'vendorUrl' => '/rest/api/2/groupuserpicker',
        'method' => 'GET',
        'description' => 'Returns a list of users and groups matching query with highlighting.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'query' => array (
                'type' => 'string',
                'info' => 'A string used to search username, Name or e-mail address.',
                'required' => false,
            ),
            'maxResults' => array (
                'type' => 'int',
                'info' => 'The maximum number of users to return (defaults to 50).',
                'required' => false,
            ),
            'showAvatar' => array (
                'type' => 'boolean',
                'info' => 'Show avatar.',
                'required' => false,
            ),
            'fieldId' => array (
                'type' => 'string',
                'info' => 'The custom field id.',
                'required' => false,
            ),
            'projectId' => array (
                'type' => 'string',
                'info' => 'The list of project ids to further restrict the search.',
                'required' => false,
            ),
            'issueTypeId' => array (
                'type' => 'string',
                'info' => 'The list of issue type ids to further restrict the search.',
                'required' => false,
            ),
        ),
    ),
    array (
        'name' => 'createSingleIssue',
        'vendorUrl' => '/rest/api/2/issue',
        'method' => 'POST',
        'description' => 'Creates an issue or a sub-task from a JSON representation.',
        'custom' => true,
        'example' => '',
        'schema' => '',
        'args' => array (
            'update' => array (
                'type' => 'JSON',
                'example' => '{"worklog":[{"add":{"timeSpent":"60m","started":"2011-07-05T11:05:00.000+0000"}}]}',
                'schema' => '{"type":"object","patternProperties":{".+":{"type":"array","items":{"title":"Field Operation","type":"object"}}},"additionalProperties":false}',
                'info' => 'Update. Example {"worklog":[{"add":{"timeSpent":"60m","started":"2011-07-05T11:05:00.000+0000"}}]}.',
                'required' => false,
            ),
            'fields' => array (
                'type' => 'JSON',
                'example' => '',
                'schema' => '{"type":"object","patternProperties":{".+":[]},"additionalProperties":false}',
                'info' => 'New issue fields. Example {"project":{"id":"10000"},"summary":"something\'s wrong","issuetype":{"id":"10000"},"assignee":{"name":"homer"},"reporter":{"name":"smithers"},"priority":{"id":"20000"},"labels":["bugfix","blitz_test"],"timetracking":{"originalEstimate":"10","remainingEstimate":"5"},"security":{"id":"10000"},"versions":[{"id":"10000"}],"environment":"environment","description":"description","duedate":"2011-03-11","fixVersions":[{"id":"10001"}],"components":[{"id":"10000"}],"customfield_30000":["10000","10002"]}.',
                'required' => false,
            ),
            'transition' => array (
                'schema' => '{"title":"Transition","type":"object","properties":{"id":{"type":"string"},"name":{"type":"string"},"to":{"title":"Status","type":"object","properties":{"statusColor":{"type":"string"},"description":{"type":"string"},"iconUrl":{"type":"string"},"name":{"type":"string"},"id":{"type":"string"},"statusCategory":{"title":"Status Category","type":"object","properties":{"id":{"type":"integer"},"key":{"type":"string"},"colorName":{"type":"string"},"name":{"type":"string"}},"additionalProperties":false}},"additionalProperties":false},"hasScreen":{"type":"boolean"},"fields":{"type":"object","patternProperties":{".+":{"title":"Field Meta","type":"object","properties":{"required":{"type":"boolean"},"schema":{"title":"Json Type","type":"object","properties":{"type":{"type":"string"},"items":{"type":"string"},"system":{"type":"string"},"custom":{"type":"string"},"customId":{"type":"integer"}},"additionalProperties":false},"name":{"type":"string"},"key":{"type":"string"},"autoCompleteUrl":{"type":"string"},"hasDefaultValue":{"type":"boolean"},"operations":{"type":"array","items":{"type":"string"}},"allowedValues":{"type":"array","items":[]}},"additionalProperties":false,"required":["required"]}},"additionalProperties":false}},"additionalProperties":false}',
                'type' => 'JSON',
                'info' => 'New issue transition.',
                'required' => false,
            ),
            'historyMetadata' => array (
                'schema' => '{"title":"History Metadata","type":"object","properties":{"type":{"type":"string"},"description":{"type":"string"},"descriptionKey":{"type":"string"},"activityDescription":{"type":"string"},"activityDescriptionKey":{"type":"string"},"emailDescription":{"type":"string"},"emailDescriptionKey":{"type":"string"},"actor":{"$ref":"#/definitions/history-metadata-participant"},"generator":{"$ref":"#/definitions/history-metadata-participant"},"cause":{"$ref":"#/definitions/history-metadata-participant"},"extraData":{"type":"object","patternProperties":{".+":{"type":"string"}},"additionalProperties":false}},"additionalProperties":false}',
                'type' => 'JSON',
                'info' => 'New issue history metadata.',
                'required' => false,
            ),
            'properties' => array (
                'schema' => '{"type":"array","items":{"title":"Entity Property","type":"object","properties":{"key":{"type":"string"},"value":[]},"additionalProperties":false}}',
                'type' => 'Array',
                'info' => 'Entity properties.',
                'required' => false,
            ),
        ),
    ),
    array (
        'name' => 'createIssues',
        'vendorUrl' => '/rest/api/2/issue/bulk',
        'method' => 'POST',
        'description' => 'Creates issues or sub-tasks from a JSON representation. Creates many issues in one bulk operation.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'issueUpdates' => array (
                'type' => 'Array',
                'example' => '[{"update":{"worklog":[{"add":{"timeSpent":"60m","started":"2011-07-05T11:05:00.000+0000"}}]},"fields":{"project":{"id":"10000"},"summary":"something\'s wrong","issuetype":{"id":"10000"},"assignee":{"name":"homer"},"reporter":{"name":"smithers"},"priority":{"id":"20000"},"labels":["bugfix","blitz_test"],"timetracking":{"originalEstimate":"10","remainingEstimate":"5"},"security":{"id":"10000"},"versions":[{"id":"10000"}],"environment":"environment","description":"description","duedate":"2011-03-11","fixVersions":[{"id":"10001"}],"components":[{"id":"10000"}],"customfield_30000":["10000","10002"],"customfield_80000":{"value":"red"},"customfield_20000":"06/Jul/11 3:25 PM","customfield_40000":"this is a text field","customfield_70000":["jira-administrators","jira-software-users"],"customfield_60000":"jira-software-users","customfield_50000":"this is a text area. big text.","customfield_10000":"09/Jun/81"}},{"update":[],"fields":{"project":{"id":"1000"},"summary":"something\'s very wrong","issuetype":{"id":"10000"},"assignee":{"name":"jerry"},"reporter":{"name":"kosecki"},"priority":{"id":"20000"},"labels":["new_release"],"timetracking":{"originalEstimate":"15","remainingEstimate":"5"},"security":{"id":"10000"},"versions":[{"id":"10000"}],"environment":"environment","description":"description","duedate":"2011-04-16","fixVersions":[{"id":"10001"}],"components":[{"id":"10000"}],"customfield_30000":["10000","10002"],"customfield_80000":{"value":"red"},"customfield_20000":"06/Jul/11 3:25 PM","customfield_40000":"this is a text field","customfield_70000":["jira-administrators","jira-software-users"],"customfield_60000":"jira-software-users","customfield_50000":"this is a text area. big text.","customfield_10000":"09/Jun/81"}}]',
                'schema' => '{"type":"array","items":{"title":"Issue Update","type":"object","properties":{"transition":{"title":"Transition","type":"object","properties":{"id":{"type":"string"},"name":{"type":"string"},"to":{"title":"Status","type":"object","properties":{"statusColor":{"type":"string"},"description":{"type":"string"},"iconUrl":{"type":"string"},"name":{"type":"string"},"id":{"type":"string"},"statusCategory":{"title":"Status Category","type":"object","properties":{"id":{"type":"integer"},"key":{"type":"string"},"colorName":{"type":"string"},"name":{"type":"string"}},"additionalProperties":false}},"additionalProperties":false},"hasScreen":{"type":"boolean"},"fields":{"type":"object","patternProperties":{".+":{"title":"Field Meta","type":"object","properties":{"required":{"type":"boolean"},"schema":{"title":"Json Type","type":"object","properties":{"type":{"type":"string"},"items":{"type":"string"},"system":{"type":"string"},"custom":{"type":"string"},"customId":{"type":"integer"}},"additionalProperties":false},"name":{"type":"string"},"key":{"type":"string"},"autoCompleteUrl":{"type":"string"},"hasDefaultValue":{"type":"boolean"},"operations":{"type":"array","items":{"type":"string"}},"allowedValues":{"type":"array","items":[]}},"additionalProperties":false,"required":["required"]}},"additionalProperties":false}},"additionalProperties":false},"fields":{"type":"object","patternProperties":{".+":[]},"additionalProperties":false},"update":{"type":"object","patternProperties":{".+":{"type":"array","items":{"title":"Field Operation","type":"object"}}},"additionalProperties":false},"historyMetadata":{"title":"History Metadata","type":"object","properties":{"type":{"type":"string"},"description":{"type":"string"},"descriptionKey":{"type":"string"},"activityDescription":{"type":"string"},"activityDescriptionKey":{"type":"string"},"emailDescription":{"type":"string"},"emailDescriptionKey":{"type":"string"},"actor":{"$ref":"#\/definitions/history-metadata-participant"},"generator":{"$ref":"#/definitions/history-metadata-participant"},"cause":{"$ref":"#/definitions/history-metadata-participant"},"extraData":{"type":"object","patternProperties":{".+":{"type":"string"}},"additionalProperties":false}},"additionalProperties":false},"properties":{"type":"array","items":{"title":"Entity Property","type":"object","properties":{"key":{"type":"string"},"value":[]},"additionalProperties":false}}},"additionalProperties":false}}',
                'info' => 'Issue updates Object. Example [{"update":{"worklog":[{"add":{"timeSpent":"60m","started":"2011-07-05T11:05:00.000+0000"}}]},"fields":{"project":{"id":"10000"},"summary":"something\'s wrong","issuetype":{"id":"10000"},"assignee":{"name":"homer"},"reporter":{"name":"smithers"},"priority":{"id":"20000"},"labels":["bugfix","blitz_test"],"timetracking":{"originalEstimate":"10","remainingEstimate":"5"},"security":{"id":"10000"},"versions":[{"id":"10000"}],"environment":"environment","description":"description","duedate":"2011-03-11","fixVersions":[{"id":"10001"}],"components":[{"id":"10000"}],"customfield_30000":["10000","10002"],"customfield_80000":{"value":"red"},"customfield_20000":"06/Jul/11 3:25 PM","customfield_40000":"this is a text field","customfield_70000":["jira-administrators","jira-software-users"],"customfield_60000":"jira-software-users","customfield_50000":"this is a text area. big text.","customfield_10000":"09/Jun/81"}},{"update":[],"fields":{"project":{"id":"1000"},"summary":"something\'s very wrong","issuetype":{"id":"10000"},"assignee":{"name":"jerry"},"reporter":{"name":"kosecki"},"priority":{"id":"20000"},"labels":["new_release"],"timetracking":{"originalEstimate":"15","remainingEstimate":"5"},"security":{"id":"10000"},"versions":[{"id":"10000"}],"environment":"environment","description":"description","duedate":"2011-04-16","fixVersions":[{"id":"10001"}],"components":[{"id":"10000"}],"customfield_30000":["10000","10002"],"customfield_80000":{"value":"red"},"customfield_20000":"06/Jul/11 3:25 PM","customfield_40000":"this is a text field","customfield_70000":["jira-administrators","jira-software-users"],"customfield_60000":"jira-software-users","customfield_50000":"this is a text area. big text.","customfield_10000":"09\/Jun\/81"}}],',
                'required' => false,
            ),
        ),
    ),
    array (
        'name' => 'getSingleIssue',
        'vendorUrl' => '/rest/api/2/issue/{issueIdOrKey}',
        'method' => 'GET',
        'description' => 'Returns a full representation of the issue for the given issue key.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'issueIdOrKey' => array (
                'required' => true,
                'type' => 'PreString',
                'info' => 'Issue identifier or key.',
            ),
            'fields' => array (
                'type' => 'string',
                'info' => 'The list of fields to return for the issue. By default, all fields are returned.',
                'required' => false,
            ),
            'expand' => array (
                'type' => 'string',
                'info' => 'Expand.',
                'required' => false,
            ),
            'properties' => array (
                'type' => 'string',
                'info' => 'The list of properties to return for the issue.',
                'required' => false,
            ),
            'fieldsByKeys' => array (
                'type' => 'boolean',
                'info' => 'If true then fields in issues will be referenced by keys instead of ids.',
                'required' => false,
            ),
            'updateHistory' => array (
                'type' => 'boolean',
                'info' => 'Update history.',
                'required' => false,
            ),
        ),
    ),
    array (
        'name' => 'deleteSingleIssue',
        'vendorUrl' => '/rest/api/2/issue/{issueIdOrKey}',
        'method' => 'DELETE',
        'description' => 'Delete an issue.',
        'default' => array(
            'deleteSubtasks' => 'true',
        ),
        'example' => '',
        'schema' => '',
        'args' => array (
            'issueIdOrKey' => array (
                'required' => true,
                'type' => 'PreString',
                'info' => 'Issue identifier or key.',
            ),
        ),
    ),
    array (
        'name' => 'updateSingleIssue',
        'vendorUrl' => '/rest/api/2/issue/{issueIdOrKey}',
        'method' => 'PUT',
        'description' => 'Edits an issue from a JSON representation.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'issueIdOrKey' => array (
                'required' => true,
                'type' => 'string',
                'info' => 'Issue identifier or key.',
            ),
            'notifyUsers' => array (
                'type' => 'boolean',
                'info' => 'Send the email with notification that the issue was updated to users that watch it.',
                'required' => false,
            ),
            'overrideScreenSecurity' => array (
                'type' => 'boolean',
                'info' => 'Allows to update fields that are not on the screen.',
                'required' => false,
            ),
            'overrideEditableFlag' => array (
                'type' => 'boolean',
                'info' => 'Updates the issue even if the issue is not editable due to being in a status with jira.issue.editable set to false or missing.',
                'required' => false,
            ),
            'transition' => array (
                'schema' => '{"title":"Transition","type":"object","properties":{"id":{"type":"string"},"name":{"type":"string"},"to":{"title":"Status","type":"object","properties":{"statusColor":{"type":"string"},"description":{"type":"string"},"iconUrl":{"type":"string"},"name":{"type":"string"},"id":{"type":"string"},"statusCategory":{"title":"Status Category","type":"object","properties":{"id":{"type":"integer"},"key":{"type":"string"},"colorName":{"type":"string"},"name":{"type":"string"}},"additionalProperties":false}},"additionalProperties":false},"hasScreen":{"type":"boolean"},"fields":{"type":"object","patternProperties":{".+":{"title":"Field Meta","type":"object","properties":{"required":{"type":"boolean"},"schema":{"title":"Json Type","type":"object","properties":{"type":{"type":"string"},"items":{"type":"string"},"system":{"type":"string"},"custom":{"type":"string"},"customId":{"type":"integer"}},"additionalProperties":false},"name":{"type":"string"},"key":{"type":"string"},"autoCompleteUrl":{"type":"string"},"hasDefaultValue":{"type":"boolean"},"operations":{"type":"array","items":{"type":"string"}},"allowedValues":{"type":"array","items":[]}},"additionalProperties":false,"required":["required"]}},"additionalProperties":false}},"additionalProperties":false}',
                'type' => 'JSON',
                'info' => 'Transition properties.',
                'required' => false,
            ),
            'fields' => array (
                'schema' => '{"type":"object","patternProperties":{".+":[]},"additionalProperties":false}',
                'type' => 'JSON',
                'info' => 'Fields properties.',
                'required' => false,
            ),
            'update' => array (
                'schema' => '{"type":"object","patternProperties":{".+":{"type":"array","items":{"title":"Field Operation","type":"object"}}},"additionalProperties":false}',
                'type' => 'JSON',
                'info' => 'Update properties.',
                'required' => false,
            ),
            'historyMetadata' => array (
                'schema' => '{"title":"History Metadata","type":"object","properties":{"type":{"type":"string"},"description":{"type":"string"},"descriptionKey":{"type":"string"},"activityDescription":{"type":"string"},"activityDescriptionKey":{"type":"string"},"emailDescription":{"type":"string"},"emailDescriptionKey":{"type":"string"},"actor":{"$ref":"#/definitions/history-metadata-participant"},"generator":{"$ref":"#/definitions/history-metadata-participant"},"cause":{"$ref":"#/definitions/history-metadata-participant"},"extraData":{"type":"object","patternProperties":{".+":{"type":"string"}},"additionalProperties":false}},"additionalProperties":false}',
                'type' => 'JSON',
                'info' => 'HistoryMetadata properties.',
                'required' => false,
            ),
            'properties' => array (
                'schema' => '{"type":"array","items":{"title":"Entity Property","type":"object","properties":{"key":{"type":"string"},"value":[]},"additionalProperties":false}}',
                'type' => 'Array',
                'info' => 'Issue properties.',
                'required' => false,
            ),
        ),
    ),
    array (
        'name' => 'assignIssueToUser',
        'vendorUrl' => '/rest/api/2/issue/{issueIdOrKey}/assignee',
        'method' => 'PUT',
        'description' => 'Assigns an issue to a user.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'issueIdOrKey' => array (
                'required' => true,
                'type' => 'string',
                'info' => 'Issue identifier or key.',
            ),
            'name' => array (
                'example' => '"harry"',
                'schema' => '{"type":"string"}',
                'type' => 'string',
                'info' => 'User name.',
                'required' => true,
            ),
            'key' => array (
                'schema' => '{"type":"string"}',
                'type' => 'string',
                'info' => 'Key.',
                'required' => false,
            ),
            'accountId' => array (
                'schema' => '{"type":"string"}',
                'type' => 'string',
                'info' => 'Account identifier.',
                'required' => false,
            ),
            'emailAddress' => array (
                'schema' => '{"type":"string"}',
                'type' => 'string',
                'info' => 'Email address.',
                'required' => false,
            ),
            'avatarUrls' => array (
                'schema' => '{"type":"object","patternProperties":{".+":{"type":"string","format":"uri"}},"additionalProperties":false}',
                'type' => 'JSON',
                'info' => 'Avatar Urls.',
                'required' => false,
            ),
            'displayName' => array (
                'schema' => '{"type":"string"}',
                'type' => 'string',
                'info' => 'Display name.',
                'required' => false,
            ),
            'active' => array (
                'schema' => '{"type":"boolean"}',
                'type' => 'boolean',
                'info' => 'Is active.',
                'required' => false,
            ),
            'timeZone' => array (
                'schema' => '{"type":"string"}',
                'type' => 'string',
                'info' => 'TimeZone.',
                'required' => false,
            ),
            'locale' => array (
                'schema' => '{"type":"string"}',
                'type' => 'string',
                'info' => 'Locale.',
                'required' => false,
            ),
            'groups' => array (
                'schema' => '{"$ref":"#/definitions/simple-list-wrapper"}',
                'type' => 'string',
                'info' => 'Groups.',
                'required' => false,
            ),
            'applicationRoles' => array (
                'schema' => '{"$ref":"#/definitions/simple-list-wrapper"}',
                'type' => 'string',
                'info' => 'Application roles.',
                'required' => false,
            ),
        ),
    ),
    array (
        'name' => 'getIssueComments',
        'vendorUrl' => '/rest/api/2/issue/{issueIdOrKey}/comment',
        'method' => 'GET',
        'description' => 'Returns all comments for an issue. Results can be ordered by the "created" field which means the date a comment was added. .',
        'example' => '',
        'schema' => '',
        'args' => array (
            'issueIdOrKey' => array (
                'required' => true,
                'type' => 'PreString',
                'info' => 'IssueIdOrKey',
            ),
            'startAt' => array (
                'type' => 'long',
                'info' => 'The page offset, if not specified then defaults to 0.',
                'required' => false,
            ),
            'maxResults' => array (
                'type' => 'int',
                'info' => 'How many results on the page should be included. Defaults to 50.',
                'required' => false,
            ),
            'orderBy' => array (
                'type' => 'string',
                'info' => 'Ordering of the results.',
                'required' => false,
            ),
            'expand' => array (
                'type' => 'string',
                'info' => 'Optional flags: renderedBody (provides body rendered in HTML).',
                'required' => false,
            ),
        ),
    ),
    array (
        'name' => 'addCommentToIssue',
        'vendorUrl' => '/rest/api/2/issue/{issueIdOrKey}/comment',
        'method' => 'POST',
        'description' => 'Adds a new comment to an issue.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'issueIdOrKey' => array (
                'required' => true,
                'type' => 'PreString',
                'info' => 'IssueIdOrKey',
            ),
            'expand' => array (
                'type' => 'string',
                'info' => 'Optional flags: renderedBody (provides body rendered in HTML).',
                'required' => false,
            ),
            'body' => array (
                'example' => '"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eget venenatis elit. Duis eu justo eget augue iaculis fermentum. Sed semper quam laoreet nisi egestas at posuere augue semper."',
                'schema' => '{"type":"string"}',
                'type' => 'PreString',
                'info' => 'Body.',
                'required' => false,
            ),
            'visibility' => array (
                'type' => 'JSON',
                'example' => '{"type":"role","value":"Administrators"}',
                'schema' => '{"title":"Visibility","type":"object","properties":{"type":{"type":"string","enum":["group","role"]},"value":{"type":"string"}},"additionalProperties":false}',
                'info' => 'Visibility.',
                'required' => false,
            ),
            'id' => array (
                'schema' => '{"type":"string"}',
                'type' => 'PreString',
                'info' => 'Id.',
                'required' => false,
            ),
            'author' => array (
                'schema' => '{"$ref":"#/definitions/user"}',
                'type' => 'PreString',
                'info' => 'Author.',
                'required' => false,
            ),
            'renderedBody' => array (
                'schema' => '{"type":"string"}',
                'type' => 'PreString',
                'info' => 'RenderedBody.',
                'required' => false,
            ),
            'updateAuthor' => array (
                'schema' => '{"$ref":"#/definitions/user"}',
                'type' => 'PreString',
                'info' => 'UpdateAuthor.',
                'required' => false,
            ),
            'created' => array (
                'schema' => '{"type":"string"}',
                'type' => 'PreString',
                'info' => 'Created.',
                'required' => false,
            ),
            'updated' => array (
                'schema' => '{"type":"string"}',
                'type' => 'PreString',
                'info' => 'Updated.',
                'required' => false,
            ),
            'properties' => array (
                'schema' => '{"type":"array","items":{"title":"Entity Property","type":"object","properties":{"key":{"type":"string"},"value":[]},"additionalProperties":false}}',
                'type' => 'PreString',
                'info' => 'Properties.',
                'required' => false,
            ),
        ),
    ),
    array (
        'name' => 'updateIssueComment',
        'vendorUrl' => '/rest/api/2/issue/{issueIdOrKey}/comment/{id}',
        'method' => 'PUT',
        'description' => 'Updates an existing comment using its JSON representation.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'issueIdOrKey' => array (
                'required' => true,
                'type' => 'PreString',
                'info' => 'IssueIdOrKey',
            ),
            'id' => array (
                'required' => true,
                'schema' => '{"type":"string"}',
                'type' => 'PreString',
                'info' => 'Id',
            ),
            'expand' => array (
                'type' => 'string',
                'info' => 'Optional flags: renderedBody (provides body rendered in HTML).',
                'required' => false,
            ),
            'body' => array (
                'example' => '"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eget venenatis elit. Duis eu justo eget augue iaculis fermentum. Sed semper quam laoreet nisi egestas at posuere augue semper."',
                'schema' => '{"type":"string"}',
                'type' => 'PreString',
                'info' => 'Body.',
                'required' => false,
            ),
            'visibility' => array (
                'type' => 'JSON',
                'example' => '{"type":"role","value":"Administrators"}',
                'schema' => '{"title":"Visibility","type":"object","properties":{"type":{"type":"string","enum":["group","role"]},"value":{"type":"string"}},"additionalProperties":false}',
                'info' => 'Visibility.',
                'required' => false,
            ),
            'author' => array (
                'schema' => '{"$ref":"#/definitions/user"}',
                'type' => 'PreString',
                'info' => 'Author.',
                'required' => false,
            ),
            'renderedBody' => array (
                'schema' => '{"type":"string"}',
                'type' => 'PreString',
                'info' => 'RenderedBody.',
                'required' => false,
            ),
            'updateAuthor' => array (
                'schema' => '{"$ref":"#/definitions/user"}',
                'type' => 'PreString',
                'info' => 'UpdateAuthor.',
                'required' => false,
            ),
            'created' => array (
                'schema' => '{"type":"string"}',
                'type' => 'PreString',
                'info' => 'Created.',
                'required' => false,
            ),
            'updated' => array (
                'schema' => '{"type":"string"}',
                'type' => 'PreString',
                'info' => 'Updated.',
                'required' => false,
            ),
            'properties' => array (
                'schema' => '{"type":"array","items":{"title":"Entity Property","type":"object","properties":{"key":{"type":"string"},"value":[]},"additionalProperties":false}}',
                'type' => 'PreString',
                'info' => 'Properties.',
                'required' => false,
            ),
        ),
    ),
    array (
        'name' => 'deleteIssueComment',
        'vendorUrl' => '/rest/api/2/issue/{issueIdOrKey}/comment/{id}',
        'method' => 'DELETE',
        'description' => 'Deletes an existing comment .',
        'example' => '',
        'schema' => '',
        'args' => array (
            'issueIdOrKey' => array (
                'required' => true,
                'type' => 'PreString',
                'info' => 'IssueIdOrKey',
            ),
            'id' => array (
                'required' => true,
                'type' => 'PreString',
                'info' => 'Id',
            ),
        ),
    ),
    array (
        'name' => 'getIssueSingleComment',
        'vendorUrl' => '/rest/api/2/issue/{issueIdOrKey}/comment/{id}',
        'method' => 'GET',
        'description' => 'Returns a single comment.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'issueIdOrKey' => array (
                'required' => true,
                'type' => 'PreString',
                'info' => 'IssueIdOrKey',
            ),
            'id' => array (
                'required' => true,
                'type' => 'PreString',
                'info' => 'Id',
            ),
            'expand' => array (
                'type' => 'string',
                'info' => 'Optional flags: renderedBody (provides body rendered in HTML).',
                'required' => false,
            ),
        ),
    ),
    array (
        'name' => 'sendIssueNotify',
        'vendorUrl' => '/rest/api/2/issue/{issueIdOrKey}/notify',
        'method' => 'POST',
        'description' => 'Sends a notification (email) to the list or recipients defined in the request.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'issueIdOrKey' => array (
                'required' => true,
                'type' => 'PreString',
                'info' => 'IssueIdOrKey',
            ),
            'subject' => array (
                'example' => '"Duis eu justo eget augue iaculis fermentum."',
                'schema' => '{"type":"string"}',
                'type' => 'PreString',
                'info' => 'Subject.',
                'required' => false,
            ),
            'textBody' => array (
                'example' => '"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eget venenatis elit. Duis eu justo eget augue iaculis fermentum. Sed semper quam laoreet nisi egestas at posuere augue semper."',
                'schema' => '{"type":"string"}',
                'type' => 'PreString',
                'info' => 'TextBody.',
                'required' => false,
            ),
            'htmlBody' => array (
                'example' => '"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eget venenatis elit. Duis eu justo eget augue iaculis fermentum. Sed semper quam laoreet nisi egestas at posuere augue semper."',
                'schema' => '{"type":"string"}',
                'type' => 'PreString',
                'info' => 'HtmlBody.',
                'required' => false,
            ),
            'to' => array (
                'type' => 'JSON',
                'example' => '{"reporter":false,"assignee":false,"watchers":true,"voters":true,"users":[{"name":"fred","active":false}],"groups":[{"name":"notification-group","self":"http://www.example.com/jira/rest/api/2/group?groupname=notification-group"}]}',
                'schema' => '{"title":"To","type":"object","properties":{"reporter":{"type":"boolean"},"assignee":{"type":"boolean"},"watchers":{"type":"boolean"},"voters":{"type":"boolean"},"users":{"type":"array","items":{"title":"User","type":"object","properties":{"name":{"type":"string"},"key":{"type":"string"},"accountId":{"type":"string"},"emailAddress":{"type":"string"},"avatarUrls":{"type":"object","patternProperties":{".+":{"type":"string"}},"additionalProperties":false},"displayName":{"type":"string"},"active":{"type":"boolean"},"timeZone":{"type":"string"}},"additionalProperties":false,"required":["active"]}},"groups":{"type":"array","items":{"$ref":"#/definitions/group"}}},"additionalProperties":false,"required":["reporter","assignee","watchers","voters"]}',
                'info' => 'To.',
                'required' => false,
            ),
            'restrict' => array (
                'type' => 'JSON',
                'example' => '{"groups":[{"name":"notification-group","self":"http://www.example.com/jira/rest/api/2/group?groupname=notification-group"}],"permissions":[{"id":"10","key":"BROWSE"}]}',
                'schema' => '{"title":"Restrict","type":"object","properties":{"groups":{"type":"array","items":{"$ref":"#/definitions/group"}},"permissions":{"type":"array","items":{"title":"Permission","type":"object","properties":{"id":{"type":"string"},"key":{"type":"string"}},"additionalProperties":false}}},"additionalProperties":false}',
                'info' => 'Restrict.',
                'required' => false,
            ),
        ),
    ),
    array (
        'name' => 'getRemoteIssueLinks',
        'vendorUrl' => '/rest/api/2/issue/{issueIdOrKey}/remotelink',
        'method' => 'GET',
        'description' => 'A REST sub-resource representing the remote issue links on the issue.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'issueIdOrKey' => array (
                'required' => true,
                'type' => 'PreString',
                'info' => 'IssueIdOrKey',
            ),
            'globalId' => array (
                'type' => 'string',
                'info' => 'The id of the remote issue link to be returned.  If null (not provided) all remote links for theissue are returned.For a fullexplanation of Issue Link fields please refer tohttps://developer.atlassian.com/display/JIRADEV/Fields+in+Remote+Issue+Links.',
                'required' => false,
            ),
        ),
    ),
    array (
        'name' => 'createRemoteIssueLink',
        'vendorUrl' => '/rest/api/2/issue/{issueIdOrKey}/remotelink',
        'method' => 'POST',
        'description' => 'Creates or updates a remote issue link from a JSON representation. If a globalId is provided and a remote issue linkexists with that globalId, the remote issue link is updated. Otherwise, the remote issue link is created.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'issueIdOrKey' => array (
                'required' => true,
                'type' => 'PreString',
                'info' => 'IssueIdOrKey',
            ),
            'globalId' => array (
                'example' => '"system=http://www.mycompany.com/support&id=1"',
                'schema' => '{"type":"string"}',
                'type' => 'PreString',
                'info' => 'GlobalId.',
                'required' => false,
            ),
            'application' => array (
                'type' => 'JSON',
                'example' => '{"type":"com.acme.tracker","name":"My Acme Tracker"}',
                'schema' => '{"title":"Application","type":"object","properties":{"type":{"type":"string"},"name":{"type":"string"}},"additionalProperties":false}',
                'info' => 'Application.',
                'required' => false,
            ),
            'relationship' => array (
                'example' => '"causes"',
                'schema' => '{"type":"string"}',
                'type' => 'PreString',
                'info' => 'Relationship.',
                'required' => false,
            ),
            'object' => array (
                'type' => 'JSON',
                'example' => '{"url":"http://www.mycompany.com/support?id=1","title":"TSTSUP-111","summary":"Crazy customer support issue","icon":{"url16x16":"http://www.mycompany.com/support/ticket.png","title":"Support Ticket"},"status":{"resolved":true,"icon":{"url16x16":"http://www.mycompany.com/support/resolved.png","title":"Case Closed","link":"http://www.mycompany.com/support?id=1&details=closed"}}}',
                'schema' => '{"title":"Remote Object","type":"object","properties":{"url":{"type":"string"},"title":{"type":"string"},"summary":{"type":"string"},"icon":{"$ref":"#/definitions/icon"},"status":{"title":"Status","type":"object","properties":{"resolved":{"type":"boolean"},"icon":{"$ref":"#/definitions/icon"}},"additionalProperties":false}},"additionalProperties":false}',
                'info' => 'Object.',
                'required' => false,
            ),
        ),
    ),
    array (
        'name' => 'deleteRemoteIssueLinkById',
        'vendorUrl' => '/rest/api/2/issue/{issueIdOrKey}/remotelink',
        'method' => 'DELETE',
        'description' => 'Delete the remote issue link with the given global id on the issue.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'issueIdOrKey' => array (
                'required' => true,
                'type' => 'PreString',
                'info' => 'IssueIdOrKey',
            ),
            'globalId' => array (
                'type' => 'string',
                'info' => 'The global id of the remote issue link.',
                'required' => false,
            ),
        ),
    ),
    array (
        'name' => 'getRemoteIssueLinkById',
        'vendorUrl' => '/rest/api/2/issue/{issueIdOrKey}/remotelink/{linkId}',
        'method' => 'GET',
        'description' => 'Get the remote issue link with the given id on the issue.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'issueIdOrKey' => array (
                'required' => true,
                'type' => 'PreString',
                'info' => 'IssueIdOrKey',
            ),
            'linkId' => array (
                'required' => true,
                'type' => 'PreString',
                'info' => 'LinkId',
            ),
        ),
    ),
    array (
        'name' => 'updateRemoteIssueLink',
        'vendorUrl' => '/rest/api/2/issue/{issueIdOrKey}/remotelink/{linkId}',
        'method' => 'PUT',
        'description' => 'Updates a remote issue link from a JSON representation. Any fields not provided are set to null.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'issueIdOrKey' => array (
                'required' => true,
                'type' => 'PreString',
                'info' => 'IssueIdOrKey',
            ),
            'linkId' => array (
                'required' => true,
                'type' => 'PreString',
                'info' => 'LinkId',
            ),
            'globalId' => array (
                'example' => '"system=http://www.mycompany.com/support&id=1"',
                'schema' => '{"type":"string"}',
                'type' => 'PreString',
                'info' => 'GlobalId.',
                'required' => false,
            ),
            'application' => array (
                'type' => 'JSON',
                'example' => '{"type":"com.acme.tracker","name":"My Acme Tracker"}',
                'schema' => '{"title":"Application","type":"object","properties":{"type":{"type":"string"},"name":{"type":"string"}},"additionalProperties":false}',
                'info' => 'Application.',
                'required' => false,
            ),
            'relationship' => array (
                'example' => '"causes"',
                'schema' => '{"type":"string"}',
                'type' => 'PreString',
                'info' => 'Relationship.',
                'required' => false,
            ),
            'object' => array (
                'type' => 'JSON',
                'example' => '{"url":"http://www.mycompany.com/support?id=1","title":"TSTSUP-111","summary":"Crazy customer support issue","icon":{"url16x16":"http://www.mycompany.com/support/ticket.png","title":"Support Ticket"},"status":{"resolved":true,"icon":{"url16x16":"http://www.mycompany.com/support/resolved.png","title":"Case Closed","link":"http://www.mycompany.com/support?id=1&details=closed"}}}',
                'schema' => '{"title":"Remote Object","type":"object","properties":{"url":{"type":"string"},"title":{"type":"string"},"summary":{"type":"string"},"icon":{"$ref":"#/definitions/icon"},"status":{"title":"Status","type":"object","properties":{"resolved":{"type":"boolean"},"icon":{"$ref":"#/definitions/icon"}},"additionalProperties":false}},"additionalProperties":false}',
                'info' => 'Object.',
                'required' => false,
            ),
        ),
    ),
    array (
        'name' => 'deleteRemoteIssueLinkById',
        'vendorUrl' => '/rest/api/2/issue/{issueIdOrKey}/remotelink/{linkId}',
        'method' => 'DELETE',
        'description' => 'Delete the remote issue link with the given id on the issue.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'issueIdOrKey' => array (
                'required' => true,
                'type' => 'PreString',
                'info' => 'IssueIdOrKey',
            ),
            'linkId' => array (
                'required' => true,
                'type' => 'PreString',
                'info' => 'LinkId',
            ),
        ),
    ),
    array (
        'name' => 'getIssueTransitions',
        'vendorUrl' => '/rest/api/2/issue/{issueIdOrKey}/transitions',
        'method' => 'GET',
        'description' => 'Get a list of the transitions possible for this issue by the current user, along with fields that are required and their types. Fields will only be returned if expand=transitions.fields. The fields in the metadata correspond to the fields in the transition screen for that transition.Fields not in the screen will not be in the metadata.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'issueIdOrKey' => array (
                'required' => true,
                'type' => 'PreString',
                'info' => 'IssueIdOrKey',
            ),
            'transitionId' => array (
                'type' => 'string',
                'info' => '.',
                'required' => false,
            ),
            'skipRemoteOnlyCondition' => array (
                'type' => 'booleanDefault: false',
                'info' => 'Flag to skip evaluation of {@link RemoteOnlyCondition}, can only be used by add-on users.',
                'required' => false,
            ),
        ),
    ),
    array (
        'name' => 'makeIssueTransition',
        'vendorUrl' => '/rest/api/2/issue/{issueIdOrKey}/transitions',
        'method' => 'POST',
        'description' => 'Perform a transition on an issue.When performing the transition you can update or set other issue fields. The fields that can be set on transtion, in either the fields parameter or the update parameter can be determinedusing the /rest/api/2/issue/{issueIdOrKey}/transitions?expand=transitions.fields resource.If a field is not configured to appear on the transition screen, then it will not be in the transition metadata, and a fieldvalidation error will occur if it is submitted.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'issueIdOrKey' => array (
                'required' => true,
                'type' => 'PreString',
                'info' => 'IssueIdOrKey',
            ),
            'update' => array (
                'type' => 'JSON',
                'example' => '{"comment":[{"add":{"body":"Bug has been fixed."}}]}',
                'schema' => '{"type":"object","patternProperties":{".+":{"type":"array","items":{"title":"Field Operation","type":"object"}}},"additionalProperties":false}',
                'info' => 'Update.',
                'required' => false,
            ),
            'fields' => array (
                'type' => 'JSON',
                'example' => '{"assignee":{"name":"bob"},"resolution":{"name":"Fixed"}}',
                'schema' => '{"type":"object","patternProperties":{".+":[]},"additionalProperties":false}',
                'info' => 'Fields.',
                'required' => false,
            ),
            'transition' => array (
                'type' => 'JSON',
                'example' => '{"id":"5"}',
                'schema' => '{"title":"Transition","type":"object","properties":{"id":{"type":"string"},"name":{"type":"string"},"to":{"title":"Status","type":"object","properties":{"statusColor":{"type":"string"},"description":{"type":"string"},"iconUrl":{"type":"string"},"name":{"type":"string"},"id":{"type":"string"},"statusCategory":{"title":"Status Category","type":"object","properties":{"id":{"type":"integer"},"key":{"type":"string"},"colorName":{"type":"string"},"name":{"type":"string"}},"additionalProperties":false}},"additionalProperties":false},"hasScreen":{"type":"boolean"},"fields":{"type":"object","patternProperties":{".+":{"title":"Field Meta","type":"object","properties":{"required":{"type":"boolean"},"schema":{"title":"Json Type","type":"object","properties":{"type":{"type":"string"},"items":{"type":"string"},"system":{"type":"string"},"custom":{"type":"string"},"customId":{"type":"integer"}},"additionalProperties":false},"name":{"type":"string"},"key":{"type":"string"},"autoCompleteUrl":{"type":"string"},"hasDefaultValue":{"type":"boolean"},"operations":{"type":"array","items":{"type":"string"}},"allowedValues":{"type":"array","items":[]}},"additionalProperties":false,"required":["required"]}},"additionalProperties":false}},"additionalProperties":false}',
                'info' => 'Transition.',
                'required' => false,
            ),
            'historyMetadata' => array (
                'type' => 'JSON',
                'example' => '{"type":"myplugin:type","description":"text description","descriptionKey":"plugin.changereason.i18.key","activityDescription":"text description","activityDescriptionKey":"plugin.activity.i18.key","actor":{"id":"tony","displayName":"Tony","type":"mysystem-user","avatarUrl":"http://mysystem/avatar/tony.jpg","url":"http://mysystem/users/tony"},"generator":{"id":"mysystem-1","type":"mysystem-application"},"cause":{"id":"myevent","type":"mysystem-event"},"extraData":{"keyvalue":"extra data","goes":"here"}}',
                'schema' => '{"title":"History Metadata","type":"object","properties":{"type":{"type":"string"},"description":{"type":"string"},"descriptionKey":{"type":"string"},"activityDescription":{"type":"string"},"activityDescriptionKey":{"type":"string"},"emailDescription":{"type":"string"},"emailDescriptionKey":{"type":"string"},"actor":{"$ref":"#/definitions/history-metadata-participant"},"generator":{"$ref":"#/definitions/history-metadata-participant"},"cause":{"$ref":"#/definitions/history-metadata-participant"},"extraData":{"type":"object","patternProperties":{".+":{"type":"string"}},"additionalProperties":false}},"additionalProperties":false}',
                'info' => 'HistoryMetadata.',
                'required' => false,
            ),
            'properties' => array (
                'schema' => '{"type":"array","items":{"title":"Entity Property","type":"object","properties":{"key":{"type":"string"},"value":[]},"additionalProperties":false}}',
                'type' => 'PreString',
                'info' => 'Properties.',
                'required' => false,
            ),
        ),
    ),
    array (
        'name' => 'deleteIssueVote',
        'vendorUrl' => '/rest/api/2/issue/{issueIdOrKey}/votes',
        'method' => 'DELETE',
        'description' => 'Remove your vote from an issue. (i.e. "unvote").',
        'example' => '',
        'schema' => '',
        'args' => array (
            'issueIdOrKey' => array (
                'required' => true,
                'type' => 'PreString',
                'info' => 'IssueIdOrKey',
            ),
        ),
    ),
    array (
        'name' => 'addIssueVote',
        'vendorUrl' => '/rest/api/2/issue/{issueIdOrKey}/votes',
        'method' => 'POST',
        'description' => 'Cast your vote in favour of an issue.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'issueIdOrKey' => array (
                'required' => true,
                'type' => 'PreString',
                'info' => 'IssueIdOrKey',
            ),
        ),
    ),
    array (
        'name' => 'getIssueVotes',
        'vendorUrl' => '/rest/api/2/issue/{issueIdOrKey}/votes',
        'method' => 'GET',
        'description' => 'A REST sub-resource representing the voters on the issue.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'issueIdOrKey' => array (
                'required' => true,
                'type' => 'PreString',
                'info' => 'IssueIdOrKey',
            ),
        ),
    ),
    array (
        'name' => 'getIssueWatchers',
        'vendorUrl' => '/rest/api/2/issue/{issueIdOrKey}/watchers',
        'method' => 'GET',
        'description' => 'Returns the list of watchers for the issue with the given key.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'issueIdOrKey' => array (
                'required' => true,
                'type' => 'PreString',
                'info' => 'IssueIdOrKey',
            ),
        ),
    ),
    array (
        'name' => 'addIssueWatcher',
        'vendorUrl' => '/rest/api/2/issue/{issueIdOrKey}/watchers',
        'method' => 'POST',
        'description' => 'Adds a user to an issue\'s watcher list.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'issueIdOrKey' => array (
                'required' => true,
                'type' => 'PreString',
                'info' => 'IssueIdOrKey',
            ),
            'properties' => array (
                'schema' => '{"id":"https://docs.atlassian.com/jira/REST/schema/string#","title":"String","type":"string"}',
                'type' => 'PreString',
                'info' => 'Properties.',
                'required' => false,
            ),
        ),
    ),
    array (
        'name' => 'deleteIssueWatcher',
        'vendorUrl' => '/rest/api/2/issue/{issueIdOrKey}/watchers',
        'method' => 'DELETE',
        'description' => 'Removes a user from an issue\'s watcher list.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'issueIdOrKey' => array (
                'required' => true,
                'type' => 'PreString',
                'info' => 'IssueIdOrKey',
            ),
            'username' => array (
                'type' => 'string',
                'info' => 'A String containing the name of the user to remove from the watcher list. Must not be null.',
                'required' => false,
            ),
        ),
    ),
    array (
        'name' => 'getIssueWorklog',
        'vendorUrl' => '/rest/api/2/issue/{issueIdOrKey}/worklog',
        'method' => 'GET',
        'description' => 'Returns all work logs for an issue.Note: Work logs won\'t be returned if the Log work field is hidden for the project.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'issueIdOrKey' => array (
                'required' => true,
                'type' => 'PreString',
                'info' => 'IssueIdOrKey',
            ),
            'expand' => array (
                'type' => 'stringDefault:',
                'info' => 'Optional comma separated list of parameters to expand:  properties (provides worklog properties).',
                'required' => false,
            ),
        ),
    ),
    array (
        'name' => 'addIssueWorklog',
        'vendorUrl' => '/rest/api/2/issue/{issueIdOrKey}/worklog',
        'method' => 'POST',
        'description' => 'Adds a new worklog entry to an issue.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'issueIdOrKey' => array (
                'required' => true,
                'type' => 'PreString',
                'info' => 'IssueIdOrKey',
            ),
            'adjustEstimate' => array (
                'type' => 'string',
                'info' => '(optional) allows you to provide specific instructions to update the remaining time estimate of the issue.  Valid values are"new" - sets the estimate to a specific value"leave"- leaves the estimate as is"manual" - specify a specific amount to increase remaining estimate by"auto"- Default option.  Will automatically adjust the value based on the new timeSpent specified on the worklog.',
                'required' => false,
            ),
            'newEstimate' => array (
                'type' => 'string',
                'info' => '(required when "new" is selected for adjustEstimate) the new value for the remaining estimate field. e.g. "2d".',
                'required' => false,
            ),
            'reduceBy' => array (
                'type' => 'string',
                'info' => '(required when "manual" is selected for adjustEstimate) the amount to reduce the remaining estimate by e.g. "2d".',
                'required' => false,
            ),
            'expand' => array (
                'type' => 'stringDefault:',
                'info' => 'Optional comma separated list of parameters to expand:  properties (provides worklog properties).',
                'required' => false,
            ),
            'comment' => array (
                'example' => '"I did some work here."',
                'schema' => '{"type":"string"}',
                'type' => 'PreString',
                'info' => 'Comment.',
                'required' => false,
            ),
            'visibility' => array (
                'type' => 'JSON',
                'example' => '{"type":"group","value":"jira-developers"}',
                'schema' => '{"title":"Visibility","type":"object","properties":{"type":{"type":"string","enum":["group","role"]},"value":{"type":"string"}},"additionalProperties":false}',
                'info' => 'Visibility.',
                'required' => false,
            ),
            'started' => array (
                'example' => '"2017-02-21T01:03:28.187+0000"',
                'schema' => '{"type":"string"}',
                'type' => 'PreString',
                'info' => 'Started.',
                'required' => false,
            ),
            'timeSpentSeconds' => array (
                'example' => '12000',
                'schema' => '{"type":"integer"}',
                'type' => 'PreString',
                'info' => 'TimeSpentSeconds.',
                'required' => false,
            ),
            'author' => array (
                'schema' => '{"$ref":"#/definitions/user"}',
                'type' => 'PreString',
                'info' => 'Author.',
                'required' => false,
            ),
            'updateAuthor' => array (
                'schema' => '{"$ref":"#/definitions/user"}',
                'type' => 'PreString',
                'info' => 'UpdateAuthor.',
                'required' => false,
            ),
            'created' => array (
                'schema' => '{"type":"string"}',
                'type' => 'PreString',
                'info' => 'Created.',
                'required' => false,
            ),
            'updated' => array (
                'schema' => '{"type":"string"}',
                'type' => 'PreString',
                'info' => 'Updated.',
                'required' => false,
            ),
            'timeSpent' => array (
                'schema' => '{"type":"string"}',
                'type' => 'PreString',
                'info' => 'TimeSpent.',
                'required' => false,
            ),
            'id' => array (
                'schema' => '{"type":"string"}',
                'type' => 'PreString',
                'info' => 'Id.',
                'required' => false,
            ),
            'issueId' => array (
                'schema' => '{"type":"string"}',
                'type' => 'PreString',
                'info' => 'IssueId.',
                'required' => false,
            ),
            'properties' => array (
                'schema' => '{"type":"array","items":{"title":"Entity Property","type":"object","properties":{"key":{"type":"string"},"value":[]},"additionalProperties":false}}',
                'type' => 'PreString',
                'info' => 'Properties.',
                'required' => false,
            ),
        ),
    ),
    array (
        'name' => 'getIssueWorklog',
        'vendorUrl' => '/rest/api/2/issue/{issueIdOrKey}/worklog/{id}',
        'method' => 'GET',
        'description' => 'Returns a specific worklog.Note: The work log won\'t be returned if the Log work field is hidden for the project.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'issueIdOrKey' => array (
                'required' => true,
                'type' => 'PreString',
                'info' => 'IssueIdOrKey',
            ),
            'id' => array (
                'required' => true,
                'type' => 'PreString',
                'info' => 'Id',
            ),
            'expand' => array (
                'type' => 'stringDefault:',
                'info' => 'Optional comma separated list of parameters to expand:  properties (provides worklog properties).',
                'required' => false,
            ),
        ),
    ),
    array (
        'name' => 'updateIssueWorklog',
        'vendorUrl' => '/rest/api/2/issue/{issueIdOrKey}/worklog/{id}',
        'method' => 'PUT',
        'description' => 'Updates an existing worklog entry. Note that:. .',
        'example' => '',
        'schema' => '',
        'args' => array (
            'issueIdOrKey' => array (
                'required' => true,
                'type' => 'PreString',
                'info' => 'IssueIdOrKey',
            ),
            'id' => array (
                'required' => true,
                'schema' => '{"type":"string"}',
                'type' => 'PreString',
                'info' => 'Id',
            ),
            'adjustEstimate' => array (
                'type' => 'string',
                'info' => '(optional) allows you to provide specific instructions to update the remaining time estimate of the issue.  Valid values are"new" - sets the estimate to a specific value"leave"- leaves the estimate as is"auto"- Default option.  Will automatically adjust the value based on the new timeSpent specified on the worklog.',
                'required' => false,
            ),
            'newEstimate' => array (
                'type' => 'string',
                'info' => '(required when "new" is selected for adjustEstimate) the new value for the remaining estimate field.',
                'required' => false,
            ),
            'expand' => array (
                'type' => 'stringDefault:',
                'info' => 'Optional comma separated list of parameters to expand:  properties (provides worklog properties).',
                'required' => false,
            ),
            'comment' => array (
                'example' => '"I did some work here."',
                'schema' => '{"type":"string"}',
                'type' => 'PreString',
                'info' => 'Comment.',
                'required' => false,
            ),
            'visibility' => array (
                'type' => 'JSON',
                'example' => '{"type":"group","value":"jira-developers"}',
                'schema' => '{"title":"Visibility","type":"object","properties":{"type":{"type":"string","enum":["group","role"]},"value":{"type":"string"}},"additionalProperties":false}',
                'info' => 'Visibility.',
                'required' => false,
            ),
            'started' => array (
                'example' => '"2017-02-21T01:03:28.187+0000"',
                'schema' => '{"type":"string"}',
                'type' => 'PreString',
                'info' => 'Started.',
                'required' => false,
            ),
            'timeSpentSeconds' => array (
                'example' => '12000',
                'schema' => '{"type":"integer"}',
                'type' => 'PreString',
                'info' => 'TimeSpentSeconds.',
                'required' => false,
            ),
            'author' => array (
                'schema' => '{"$ref":"#/definitions/user"}',
                'type' => 'PreString',
                'info' => 'Author.',
                'required' => false,
            ),
            'updateAuthor' => array (
                'schema' => '{"$ref":"#/definitions/user"}',
                'type' => 'PreString',
                'info' => 'UpdateAuthor.',
                'required' => false,
            ),
            'created' => array (
                'schema' => '{"type":"string"}',
                'type' => 'PreString',
                'info' => 'Created.',
                'required' => false,
            ),
            'updated' => array (
                'schema' => '{"type":"string"}',
                'type' => 'PreString',
                'info' => 'Updated.',
                'required' => false,
            ),
            'timeSpent' => array (
                'schema' => '{"type":"string"}',
                'type' => 'PreString',
                'info' => 'TimeSpent.',
                'required' => false,
            ),
            'issueId' => array (
                'schema' => '{"type":"string"}',
                'type' => 'PreString',
                'info' => 'IssueId.',
                'required' => false,
            ),
            'properties' => array (
                'schema' => '{"type":"array","items":{"title":"Entity Property","type":"object","properties":{"key":{"type":"string"},"value":[]},"additionalProperties":false}}',
                'type' => 'PreString',
                'info' => 'Properties.',
                'required' => false,
            ),
        ),
    ),
    array (
        'name' => 'deleteIssueWorklog',
        'vendorUrl' => '/rest/api/2/issue/{issueIdOrKey}/worklog/{id}',
        'method' => 'DELETE',
        'description' => 'Deletes an existing worklog entry.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'issueIdOrKey' => array (
                'required' => true,
                'type' => 'PreString',
                'info' => 'IssueIdOrKey',
            ),
            'id' => array (
                'required' => true,
                'type' => 'PreString',
                'info' => 'Id',
            ),
            'adjustEstimate' => array (
                'type' => 'string',
                'info' => '(optional) allows you to provide specific instructions to update the remaining time estimate of the issue.  Valid values are"new" - sets the estimate to a specific value"leave"- leaves the estimate as is"manual" - specify a specific amount to increase remaining estimate by"auto"- Default option.  Will automatically adjust the value based on the new timeSpent specified on the worklog.',
                'required' => false,
            ),
            'newEstimate' => array (
                'type' => 'string',
                'info' => '(required when "new" is selected for adjustEstimate) the new value for the remaining estimate field. e.g. "2d".',
                'required' => false,
            ),
            'increaseBy' => array (
                'type' => 'string',
                'info' => '(required when "manual" is selected for adjustEstimate) the amount to increase the remaining estimate by e.g. "2d".',
                'required' => false,
            ),
        ),
    ),
    array (
        'name' => 'getCreatedIssueMeta',
        'vendorUrl' => '/rest/api/2/issue/createmeta',
        'method' => 'GET',
        'description' => 'Returns the meta data for creating issues. This includes the available projects, issue types and fields,including field types and whether or not those fields are required.Projects will not be returned if the user does not have permission to create issues in that project. The fields in the createmeta correspond to the fields in the create screen for the project/issuetype.Fields not in the screen will not be in the createmeta. Fields will only be returned if expand=projects.issuetypes.fields. The results can be filtered by project and/or issue type, given by the query params.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'projectIds' => array (
                'type' => 'string',
                'info' => 'Combined with the projectKeys param, lists the projects with which to filter the results. If absent, all projects are returned.This parameter can be specified multiple times, and/or be a comma-separated list.Specifiying a project that does not exist (or that you cannot create issues in) is not an error, but it will not be in the results.',
                'required' => false,
            ),
            'projectKeys' => array (
                'type' => 'string',
                'info' => 'Combined with the projectIds param, lists the projects with which to filter the results. If null, all projects are returned.This parameter can be specified multiple times, and/or be a comma-separated list.Specifiying a project that does not exist (or that you cannot create issues in) is not an error, but it will not be in the results.',
                'required' => false,
            ),
            'issuetypeIds' => array (
                'type' => 'string',
                'info' => 'Combinded with issuetypeNames, lists the issue types with which to filter the results. If null, all issue types are returned.This parameter can be specified multiple times, and/or be a comma-separated list.Specifiying an issue type that does not exist is not an error.',
                'required' => false,
            ),
            'issuetypeNames' => array (
                'type' => 'string',
                'info' => 'Combinded with issuetypeIds, lists the issue types with which to filter the results. If null, all issue types are returned.This parameter can be specified multiple times, but is NOT interpreted as a comma-separated list.Specifiying an issue type that does not exist is not an error.',
                'required' => false,
            ),
        ),
    ),
    array (
        'name' => 'getIssuesBasedOnQuary',
        'vendorUrl' => '/rest/api/2/issue/picker',
        'method' => 'GET',
        'description' => 'Returns suggested issues which match the auto-completion query for the user which executes this request. This RESTmethod will check the user\'s history and the user\'s browsing context and select this issues, which match the query.',
        'example' => '',
        'schema' => '',
        'args' => array (
            'query' => array (
                'type' => 'string',
                'info' => 'The query.',
                'required' => false,
            ),
            'currentJQL' => array (
                'type' => 'string',
                'info' => 'The JQL in context of which the request is executed. Only issues which match this JQL query will be included in results.',
                'required' => false,
            ),
            'currentIssueKey' => array (
                'type' => 'string',
                'info' => 'The key of the issue in context of which the request is executed. The issue which is in context will not be included in the auto-completion result, even if it matches the query.',
                'required' => false,
            ),
            'currentProjectId' => array (
                'type' => 'string',
                'info' => 'The id of the project in context of which the request is executed. Suggested issues will be only from this project.',
                'required' => false,
            ),
            'showSubTasks' => array (
                'type' => 'boolean',
                'info' => 'If set to false, subtasks will not be included in the list.',
                'required' => false,
            ),
            'showSubTaskParent' => array (
                'type' => 'boolean',
                'info' => 'If set to false and request is executed in context of a subtask, the parent issue will not be included in the auto-completion result, even if it matches the query.',
                'required' => false,
            ),
        ),
    ),
    array (
        'name' => 'addIssueAttachment',
        'vendorUrl' => '/rest/api/2/issue/{issueIdOrKey}/attachments',
        'method' => 'POST',
        'description' => 'Add one or more attachments to an issue. This resource expects a multipart post. The media-type multipart/form-data is defined in RFC 1867. Most clientlibraries have classes that make dealing with multipart posts simple. For instance, in Java the Apache HTTP Componentslibrary provides aMultiPartEntitythat makes it simple to submit a multipart POST. In order to protect against XSRF attacks, because this method accepts multipart/form-data, it has XSRF protectionon it.  This means you must submit a header of X-Atlassian-Token: no-check with the request, otherwise it will beblocked. The name of the multipart/form-data parameter that contains attachments must be "file". A simple example to upload a file called "myfile.txt" to issue REST-123:. .',
        'example' => '',
        'schema' => '',
        'args' => array (
            'issueIdOrKey' => array (
                'required' => true,
                'type' => 'PreString',
                'info' => 'IssueIdOrKey',
            ),
        ),
    ),
);
